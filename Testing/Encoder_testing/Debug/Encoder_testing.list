
Encoder_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006634  08006634  00007634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006644  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  24000010  08006654  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000120  08006654  00008120  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a22  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002819  00000000  00000000  0001ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  0001e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ada  00000000  00000000  0001f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030055  00000000  00000000  0001fb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000157b6  00000000  00000000  0004fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134d8c  00000000  00000000  0006536d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019a0f9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000039b0  00000000  00000000  0019a13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  0019daec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080065e4 	.word	0x080065e4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080065e4 	.word	0x080065e4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b988 	b.w	8000614 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	468e      	mov	lr, r1
 8000324:	4604      	mov	r4, r0
 8000326:	4688      	mov	r8, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d962      	bls.n	80003f8 <__udivmoddi4+0xdc>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	b14e      	cbz	r6, 800034c <__udivmoddi4+0x30>
 8000338:	f1c6 0320 	rsb	r3, r6, #32
 800033c:	fa01 f806 	lsl.w	r8, r1, r6
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	40b7      	lsls	r7, r6
 8000346:	ea43 0808 	orr.w	r8, r3, r8
 800034a:	40b4      	lsls	r4, r6
 800034c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000350:	fa1f fc87 	uxth.w	ip, r7
 8000354:	fbb8 f1fe 	udiv	r1, r8, lr
 8000358:	0c23      	lsrs	r3, r4, #16
 800035a:	fb0e 8811 	mls	r8, lr, r1, r8
 800035e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000362:	fb01 f20c 	mul.w	r2, r1, ip
 8000366:	429a      	cmp	r2, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x62>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000370:	f080 80ea 	bcs.w	8000548 <__udivmoddi4+0x22c>
 8000374:	429a      	cmp	r2, r3
 8000376:	f240 80e7 	bls.w	8000548 <__udivmoddi4+0x22c>
 800037a:	3902      	subs	r1, #2
 800037c:	443b      	add	r3, r7
 800037e:	1a9a      	subs	r2, r3, r2
 8000380:	b2a3      	uxth	r3, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800038e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000392:	459c      	cmp	ip, r3
 8000394:	d909      	bls.n	80003aa <__udivmoddi4+0x8e>
 8000396:	18fb      	adds	r3, r7, r3
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	f080 80d6 	bcs.w	800054c <__udivmoddi4+0x230>
 80003a0:	459c      	cmp	ip, r3
 80003a2:	f240 80d3 	bls.w	800054c <__udivmoddi4+0x230>
 80003a6:	443b      	add	r3, r7
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ae:	eba3 030c 	sub.w	r3, r3, ip
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11d      	cbz	r5, 80003be <__udivmoddi4+0xa2>
 80003b6:	40f3      	lsrs	r3, r6
 80003b8:	2200      	movs	r2, #0
 80003ba:	e9c5 3200 	strd	r3, r2, [r5]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d905      	bls.n	80003d2 <__udivmoddi4+0xb6>
 80003c6:	b10d      	cbz	r5, 80003cc <__udivmoddi4+0xb0>
 80003c8:	e9c5 0100 	strd	r0, r1, [r5]
 80003cc:	2100      	movs	r1, #0
 80003ce:	4608      	mov	r0, r1
 80003d0:	e7f5      	b.n	80003be <__udivmoddi4+0xa2>
 80003d2:	fab3 f183 	clz	r1, r3
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d146      	bne.n	8000468 <__udivmoddi4+0x14c>
 80003da:	4573      	cmp	r3, lr
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xc8>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 8105 	bhi.w	80005ee <__udivmoddi4+0x2d2>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	4690      	mov	r8, r2
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e5      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f2:	e9c5 4800 	strd	r4, r8, [r5]
 80003f6:	e7e2      	b.n	80003be <__udivmoddi4+0xa2>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f000 8090 	beq.w	800051e <__udivmoddi4+0x202>
 80003fe:	fab2 f682 	clz	r6, r2
 8000402:	2e00      	cmp	r6, #0
 8000404:	f040 80a4 	bne.w	8000550 <__udivmoddi4+0x234>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000410:	b280      	uxth	r0, r0
 8000412:	b2bc      	uxth	r4, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb2 fcfe 	udiv	ip, r2, lr
 800041a:	fb0e 221c 	mls	r2, lr, ip, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb04 f20c 	mul.w	r2, r4, ip
 8000426:	429a      	cmp	r2, r3
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x11e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x11c>
 8000432:	429a      	cmp	r2, r3
 8000434:	f200 80e0 	bhi.w	80005f8 <__udivmoddi4+0x2dc>
 8000438:	46c4      	mov	ip, r8
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000440:	fb0e 3312 	mls	r3, lr, r2, r3
 8000444:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000448:	fb02 f404 	mul.w	r4, r2, r4
 800044c:	429c      	cmp	r4, r3
 800044e:	d907      	bls.n	8000460 <__udivmoddi4+0x144>
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	f102 30ff 	add.w	r0, r2, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x142>
 8000458:	429c      	cmp	r4, r3
 800045a:	f200 80ca 	bhi.w	80005f2 <__udivmoddi4+0x2d6>
 800045e:	4602      	mov	r2, r0
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000466:	e7a5      	b.n	80003b4 <__udivmoddi4+0x98>
 8000468:	f1c1 0620 	rsb	r6, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 f706 	lsr.w	r7, r2, r6
 8000472:	431f      	orrs	r7, r3
 8000474:	fa0e f401 	lsl.w	r4, lr, r1
 8000478:	fa20 f306 	lsr.w	r3, r0, r6
 800047c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000480:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	fa1f fc87 	uxth.w	ip, r7
 800048e:	fbbe f0f9 	udiv	r0, lr, r9
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	fb09 ee10 	mls	lr, r9, r0, lr
 8000498:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800049c:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	fa02 f201 	lsl.w	r2, r2, r1
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x1a0>
 80004a8:	193c      	adds	r4, r7, r4
 80004aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80004ae:	f080 809c 	bcs.w	80005ea <__udivmoddi4+0x2ce>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	f240 8099 	bls.w	80005ea <__udivmoddi4+0x2ce>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	eba4 040e 	sub.w	r4, r4, lr
 80004c0:	fa1f fe83 	uxth.w	lr, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d4:	45a4      	cmp	ip, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1ce>
 80004d8:	193c      	adds	r4, r7, r4
 80004da:	f103 3eff 	add.w	lr, r3, #4294967295
 80004de:	f080 8082 	bcs.w	80005e6 <__udivmoddi4+0x2ca>
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d97f      	bls.n	80005e6 <__udivmoddi4+0x2ca>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ee:	eba4 040c 	sub.w	r4, r4, ip
 80004f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f6:	4564      	cmp	r4, ip
 80004f8:	4673      	mov	r3, lr
 80004fa:	46e1      	mov	r9, ip
 80004fc:	d362      	bcc.n	80005c4 <__udivmoddi4+0x2a8>
 80004fe:	d05f      	beq.n	80005c0 <__udivmoddi4+0x2a4>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x1fe>
 8000502:	ebb8 0203 	subs.w	r2, r8, r3
 8000506:	eb64 0409 	sbc.w	r4, r4, r9
 800050a:	fa04 f606 	lsl.w	r6, r4, r6
 800050e:	fa22 f301 	lsr.w	r3, r2, r1
 8000512:	431e      	orrs	r6, r3
 8000514:	40cc      	lsrs	r4, r1
 8000516:	e9c5 6400 	strd	r6, r4, [r5]
 800051a:	2100      	movs	r1, #0
 800051c:	e74f      	b.n	80003be <__udivmoddi4+0xa2>
 800051e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000522:	0c01      	lsrs	r1, r0, #16
 8000524:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000528:	b280      	uxth	r0, r0
 800052a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800052e:	463b      	mov	r3, r7
 8000530:	4638      	mov	r0, r7
 8000532:	463c      	mov	r4, r7
 8000534:	46b8      	mov	r8, r7
 8000536:	46be      	mov	lr, r7
 8000538:	2620      	movs	r6, #32
 800053a:	fbb1 f1f7 	udiv	r1, r1, r7
 800053e:	eba2 0208 	sub.w	r2, r2, r8
 8000542:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000546:	e766      	b.n	8000416 <__udivmoddi4+0xfa>
 8000548:	4601      	mov	r1, r0
 800054a:	e718      	b.n	800037e <__udivmoddi4+0x62>
 800054c:	4610      	mov	r0, r2
 800054e:	e72c      	b.n	80003aa <__udivmoddi4+0x8e>
 8000550:	f1c6 0220 	rsb	r2, r6, #32
 8000554:	fa2e f302 	lsr.w	r3, lr, r2
 8000558:	40b7      	lsls	r7, r6
 800055a:	40b1      	lsls	r1, r6
 800055c:	fa20 f202 	lsr.w	r2, r0, r2
 8000560:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000564:	430a      	orrs	r2, r1
 8000566:	fbb3 f8fe 	udiv	r8, r3, lr
 800056a:	b2bc      	uxth	r4, r7
 800056c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb08 f904 	mul.w	r9, r8, r4
 800057a:	40b0      	lsls	r0, r6
 800057c:	4589      	cmp	r9, r1
 800057e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000582:	b280      	uxth	r0, r0
 8000584:	d93e      	bls.n	8000604 <__udivmoddi4+0x2e8>
 8000586:	1879      	adds	r1, r7, r1
 8000588:	f108 3cff 	add.w	ip, r8, #4294967295
 800058c:	d201      	bcs.n	8000592 <__udivmoddi4+0x276>
 800058e:	4589      	cmp	r9, r1
 8000590:	d81f      	bhi.n	80005d2 <__udivmoddi4+0x2b6>
 8000592:	eba1 0109 	sub.w	r1, r1, r9
 8000596:	fbb1 f9fe 	udiv	r9, r1, lr
 800059a:	fb09 f804 	mul.w	r8, r9, r4
 800059e:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a2:	b292      	uxth	r2, r2
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d229      	bcs.n	8000600 <__udivmoddi4+0x2e4>
 80005ac:	18ba      	adds	r2, r7, r2
 80005ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b2:	d2c4      	bcs.n	800053e <__udivmoddi4+0x222>
 80005b4:	4542      	cmp	r2, r8
 80005b6:	d2c2      	bcs.n	800053e <__udivmoddi4+0x222>
 80005b8:	f1a9 0102 	sub.w	r1, r9, #2
 80005bc:	443a      	add	r2, r7
 80005be:	e7be      	b.n	800053e <__udivmoddi4+0x222>
 80005c0:	45f0      	cmp	r8, lr
 80005c2:	d29d      	bcs.n	8000500 <__udivmoddi4+0x1e4>
 80005c4:	ebbe 0302 	subs.w	r3, lr, r2
 80005c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005cc:	3801      	subs	r0, #1
 80005ce:	46e1      	mov	r9, ip
 80005d0:	e796      	b.n	8000500 <__udivmoddi4+0x1e4>
 80005d2:	eba7 0909 	sub.w	r9, r7, r9
 80005d6:	4449      	add	r1, r9
 80005d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e0:	fb09 f804 	mul.w	r8, r9, r4
 80005e4:	e7db      	b.n	800059e <__udivmoddi4+0x282>
 80005e6:	4673      	mov	r3, lr
 80005e8:	e77f      	b.n	80004ea <__udivmoddi4+0x1ce>
 80005ea:	4650      	mov	r0, sl
 80005ec:	e766      	b.n	80004bc <__udivmoddi4+0x1a0>
 80005ee:	4608      	mov	r0, r1
 80005f0:	e6fd      	b.n	80003ee <__udivmoddi4+0xd2>
 80005f2:	443b      	add	r3, r7
 80005f4:	3a02      	subs	r2, #2
 80005f6:	e733      	b.n	8000460 <__udivmoddi4+0x144>
 80005f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005fc:	443b      	add	r3, r7
 80005fe:	e71c      	b.n	800043a <__udivmoddi4+0x11e>
 8000600:	4649      	mov	r1, r9
 8000602:	e79c      	b.n	800053e <__udivmoddi4+0x222>
 8000604:	eba1 0109 	sub.w	r1, r1, r9
 8000608:	46c4      	mov	ip, r8
 800060a:	fbb1 f9fe 	udiv	r9, r1, lr
 800060e:	fb09 f804 	mul.w	r8, r9, r4
 8000612:	e7c4      	b.n	800059e <__udivmoddi4+0x282>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <AS5600_CheckConnection>:
const float   AS5600_RAW_TO_RPM         = 60.0 / 4096;

EncoderStruct *encoder = 0;

uint8_t AS5600_CheckConnection(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ref;
	ref = HAL_I2C_IsDeviceReady(&hi2c1, AS5600_I2C_ADDR, 3, 100);
 800061e:	2364      	movs	r3, #100	@ 0x64
 8000620:	2203      	movs	r2, #3
 8000622:	216c      	movs	r1, #108	@ 0x6c
 8000624:	4807      	ldr	r0, [pc, #28]	@ (8000644 <AS5600_CheckConnection+0x2c>)
 8000626:	f001 fb79 	bl	8001d1c <HAL_I2C_IsDeviceReady>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]

    if (ref == HAL_OK)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d101      	bne.n	8000638 <AS5600_CheckConnection+0x20>
    {
        // ACK feedback device -> I2C works fine
        return 1;
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <AS5600_CheckConnection+0x22>
    }
    else
    {
        // No response received -> I2C error or not connected
        return 0;
 8000638:	2300      	movs	r3, #0
    }
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	24000030 	.word	0x24000030

08000648 <AS5600_ReadRawAngle>:

void AS5600_ReadRawAngle(EncoderStruct *encoder)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	6078      	str	r0, [r7, #4]
	encoder -> angle12 = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	801a      	strh	r2, [r3, #0]
    uint8_t buf[2];

    // Read 2 bytes from register RAW_ANGLE_MSB (0x0C) & RAW_ANGLE_LSB (0x0D)
    HAL_I2C_Mem_Read(
 8000656:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2302      	movs	r3, #2
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	220c      	movs	r2, #12
 800066a:	216c      	movs	r1, #108	@ 0x6c
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <AS5600_ReadRawAngle+0x4c>)
 800066e:	f001 fa3b 	bl	8001ae8 <HAL_I2C_Mem_Read>
		2,
		500                        // timeout 100ms
);

    // Combines 12 bits (bits [11:0])
    uint16_t raw = (((uint16_t)buf[0] << 8) | buf[1]);
 8000672:	7b3b      	ldrb	r3, [r7, #12]
 8000674:	b21b      	sxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b21a      	sxth	r2, r3
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b21b      	sxth	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	81fb      	strh	r3, [r7, #14]
    encoder -> angle12 = raw;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	89fa      	ldrh	r2, [r7, #14]
 8000688:	801a      	strh	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	24000030 	.word	0x24000030

08000698 <AS5600_WriteZPOS>:

void AS5600_WriteZPOS(EncoderStruct *encoder)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	// Limit to 12-bit values ​​(guaranteed not to exceed 4095)
    encoder -> angle12 &= 0x0FFF;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	801a      	strh	r2, [r3, #0]

    // ZPOS consists of 2 bytes:
    // - MSB (0x01): contains 4 high bits (bits 11:8)
    // - LSB (0x02): contains 8 low bits (bits 7:0)
    uint8_t zp_data_msb = (uint8_t)((encoder -> angle12 >> 8) & 0x0F);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	73fb      	strb	r3, [r7, #15]
    uint8_t zp_data_lsb = (uint8_t)(encoder -> angle12 & 0xFF);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	73bb      	strb	r3, [r7, #14]

    // Write MSB first
    HAL_I2C_Mem_Write(
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	f107 030f 	add.w	r3, r7, #15
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	2201      	movs	r2, #1
 80006da:	216c      	movs	r1, #108	@ 0x6c
 80006dc:	4809      	ldr	r0, [pc, #36]	@ (8000704 <AS5600_WriteZPOS+0x6c>)
 80006de:	f001 f8ef 	bl	80018c0 <HAL_I2C_Mem_Write>
        1,
        100
    );

    // Write LSB later
    HAL_I2C_Mem_Write(
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030e 	add.w	r3, r7, #14
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2202      	movs	r2, #2
 80006f4:	216c      	movs	r1, #108	@ 0x6c
 80006f6:	4803      	ldr	r0, [pc, #12]	@ (8000704 <AS5600_WriteZPOS+0x6c>)
 80006f8:	f001 f8e2 	bl	80018c0 <HAL_I2C_Mem_Write>
        I2C_MEMADD_SIZE_8BIT,
        &zp_data_lsb,
        1,
        100
    );
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	24000030 	.word	0x24000030

08000708 <AS5600_ReadZPOS>:

void AS5600_ReadZPOS(EncoderStruct *encoder)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af04      	add	r7, sp, #16
 800070e:	6078      	str	r0, [r7, #4]
	encoder -> zpos12 = 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	80da      	strh	r2, [r3, #6]
    uint8_t buf1[2];

    /* Read 2 consecutive bytes starting from ZPOS_MSB (0x01) -> will read 0x01 and 0x02 */
    HAL_I2C_Mem_Read(
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	2201      	movs	r2, #1
 8000728:	216c      	movs	r1, #108	@ 0x6c
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <AS5600_ReadZPOS+0x48>)
 800072c:	f001 f9dc 	bl	8001ae8 <HAL_I2C_Mem_Read>
        2,
        100
    );

    /* 12-bit combination */
    uint16_t zp_raw = ((uint16_t)buf1[0] << 8) | buf1[1];
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	b21b      	sxth	r3, r3
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b21a      	sxth	r2, r3
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	b21b      	sxth	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	81fb      	strh	r3, [r7, #14]
    encoder -> zpos12 = zp_raw;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	89fa      	ldrh	r2, [r7, #14]
 8000746:	80da      	strh	r2, [r3, #6]
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000030 	.word	0x24000030

08000754 <AS5600_WriteMPOS>:

void AS5600_WriteMPOS(EncoderStruct *encoder)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af04      	add	r7, sp, #16
 800075a:	6078      	str	r0, [r7, #4]
	// Limit to 12-bit values ​​(guaranteed not to exceed 4095)
    encoder -> angle12 &= 0x0FFF;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000764:	b29a      	uxth	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	801a      	strh	r2, [r3, #0]

    // MPOS consists of 2 bytes:
    // - MSB (0x03): contains 4 high bits (bits 11:8)
    // - LSB (0x04): contains 8 low bits (bits 7:0)
    uint8_t mp_data_msb = (uint8_t)((encoder -> angle12 >> 8) & 0x0F);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
    uint8_t mp_data_lsb = (uint8_t)(encoder -> angle12 & 0xFF);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	73bb      	strb	r3, [r7, #14]

    // Write MSB first
    HAL_I2C_Mem_Write(
 8000784:	2364      	movs	r3, #100	@ 0x64
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f107 030f 	add.w	r3, r7, #15
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2203      	movs	r2, #3
 8000796:	216c      	movs	r1, #108	@ 0x6c
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <AS5600_WriteMPOS+0x6c>)
 800079a:	f001 f891 	bl	80018c0 <HAL_I2C_Mem_Write>
        1,
        100
    );

    // Write LSB later
    HAL_I2C_Mem_Write(
 800079e:	2364      	movs	r3, #100	@ 0x64
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	f107 030e 	add.w	r3, r7, #14
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	2204      	movs	r2, #4
 80007b0:	216c      	movs	r1, #108	@ 0x6c
 80007b2:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <AS5600_WriteMPOS+0x6c>)
 80007b4:	f001 f884 	bl	80018c0 <HAL_I2C_Mem_Write>
        I2C_MEMADD_SIZE_8BIT,
        &mp_data_lsb,
        1,
        100
    );
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	24000030 	.word	0x24000030

080007c4 <AS5600_ReadMPOS>:

void AS5600_ReadMPOS(EncoderStruct *encoder)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
	encoder -> mpos12 = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	811a      	strh	r2, [r3, #8]
    uint8_t buf2[2];

    /* Read 2 consecutive bytes starting from MPOS_MSB (0x03) -> will read 0x03 and 0x04 */
    HAL_I2C_Mem_Read(
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	2302      	movs	r3, #2
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	2203      	movs	r2, #3
 80007e4:	216c      	movs	r1, #108	@ 0x6c
 80007e6:	4809      	ldr	r0, [pc, #36]	@ (800080c <AS5600_ReadMPOS+0x48>)
 80007e8:	f001 f97e 	bl	8001ae8 <HAL_I2C_Mem_Read>
        2,
        100
    );

    /* 12-bit combination */
    uint16_t mp_raw = ((uint16_t)buf2[0] << 8) | buf2[1];
 80007ec:	7b3b      	ldrb	r3, [r7, #12]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	81fb      	strh	r3, [r7, #14]
    encoder -> mpos12 = mp_raw;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	89fa      	ldrh	r2, [r7, #14]
 8000802:	811a      	strh	r2, [r3, #8]
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000030 	.word	0x24000030

08000810 <AS5600_MakeSmooth>:
        );
    }
}

void AS5600_MakeSmooth(EncoderStruct *encoder)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af04      	add	r7, sp, #16
 8000816:	6078      	str	r0, [r7, #4]
	encoder -> filter_mode  = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	72da      	strb	r2, [r3, #11]
	encoder -> filter_mode = (AS5600_SLOW_FILTER_8X | (AS5600_FF_THRESHOLD_SLOW_FILTER_ONLY << 2));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	72da      	strb	r2, [r3, #11]
	HAL_I2C_Mem_Write(
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	330b      	adds	r3, #11
 8000828:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800082c:	9202      	str	r2, [sp, #8]
 800082e:	2201      	movs	r2, #1
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	2207      	movs	r2, #7
 8000838:	216c      	movs	r1, #108	@ 0x6c
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <AS5600_MakeSmooth+0x38>)
 800083c:	f001 f840 	bl	80018c0 <HAL_I2C_Mem_Write>
	        I2C_MEMADD_SIZE_8BIT,
	        &(encoder -> filter_mode),
	        1,
	        500                   // timeout 500ms
	    );
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24000030 	.word	0x24000030

0800084c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_GPIO_Init+0x80>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000868:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <MX_GPIO_Init+0x80>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_GPIO_Init+0x80>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_GPIO_Init+0x80>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000886:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <MX_GPIO_Init+0x80>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_GPIO_Init+0x80>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <MX_GPIO_Init+0x84>)
 80008a4:	f000 ff3c 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_GPIO_Init+0x84>)
 80008c0:	f000 fd7e 	bl	80013c0 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58020400 	.word	0x58020400

080008d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_I2C1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MX_I2C1_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000910:	f000 ff3a 	bl	8001788 <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 f967 	bl	8000bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000922:	f001 fdc3 	bl	80024ac <HAL_I2CEx_ConfigAnalogFilter>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 f95e 	bl	8000bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000934:	f001 fe05 	bl	8002542 <HAL_I2CEx_ConfigDigitalFilter>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f955 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000030 	.word	0x24000030
 800094c:	40005400 	.word	0x40005400
 8000950:	00707cbb 	.word	0x00707cbb

08000954 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0ba      	sub	sp, #232	@ 0xe8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	22c0      	movs	r2, #192	@ 0xc0
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f005 fe09 	bl	800658c <memset>
  if(i2cHandle->Instance==I2C1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a26      	ldr	r2, [pc, #152]	@ (8000a18 <HAL_I2C_MspInit+0xc4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d145      	bne.n	8000a10 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000984:	f04f 0208 	mov.w	r2, #8
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fe36 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009a6:	f000 f921 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 80009ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c8:	23c0      	movs	r3, #192	@ 0xc0
 80009ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ce:	2312      	movs	r3, #18
 80009d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e0:	2304      	movs	r3, #4
 80009e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <HAL_I2C_MspInit+0xcc>)
 80009ee:	f000 fce7 	bl	80013c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 80009f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009f8:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009fe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_I2C_MspInit+0xc8>)
 8000a04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	37e8      	adds	r7, #232	@ 0xe8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	58020400 	.word	0x58020400

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a2a:	f000 f8b3 	bl	8000b94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fab5 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f84b 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f7ff ff09 	bl	800084c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3a:	f7ff ff4b 	bl	80008d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 f9cd 	bl	8000ddc <MX_USART2_UART_Init>
  *encoder = (EncoderStruct){0};
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <main+0x9c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	6053      	str	r3, [r2, #4]
 8000a4e:	6093      	str	r3, [r2, #8]
 8000a50:	60d3      	str	r3, [r2, #12]
 8000a52:	6113      	str	r3, [r2, #16]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  testing = AS5600_CheckConnection();
 8000a54:	f7ff fde0 	bl	8000618 <AS5600_CheckConnection>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <main+0xa0>)
 8000a5e:	701a      	strb	r2, [r3, #0]
	  AS5600_MakeSmooth(encoder);
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <main+0x9c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fed3 	bl	8000810 <AS5600_MakeSmooth>
	  AS5600_ReadRawAngle(encoder);
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <main+0x9c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fdea 	bl	8000648 <AS5600_ReadRawAngle>
	  AS5600_WriteZPOS(encoder);
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <main+0x9c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe0d 	bl	8000698 <AS5600_WriteZPOS>
	  AS5600_ReadZPOS(encoder);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <main+0x9c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe40 	bl	8000708 <AS5600_ReadZPOS>
	  HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f000 fb19 	bl	80010c0 <HAL_Delay>

	  AS5600_ReadRawAngle(encoder);
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <main+0x9c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fdd8 	bl	8000648 <AS5600_ReadRawAngle>
	  AS5600_WriteMPOS(encoder);
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <main+0x9c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe59 	bl	8000754 <AS5600_WriteMPOS>
	  AS5600_ReadMPOS(encoder);
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <main+0x9c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe8c 	bl	80007c4 <AS5600_ReadMPOS>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000aac:	2101      	movs	r1, #1
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <main+0xa4>)
 8000ab0:	f000 fe4f 	bl	8001752 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); /* 1000 ms on/off -> 2 Hz blink */
 8000ab4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab8:	f000 fb02 	bl	80010c0 <HAL_Delay>
	  testing = AS5600_CheckConnection();
 8000abc:	bf00      	nop
 8000abe:	e7c9      	b.n	8000a54 <main+0x30>
 8000ac0:	2400002c 	.word	0x2400002c
 8000ac4:	24000084 	.word	0x24000084
 8000ac8:	58020400 	.word	0x58020400

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	@ 0x70
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	224c      	movs	r2, #76	@ 0x4c
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fd56 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fd50 	bl	800658c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <SystemClock_Config+0xbc>)
 8000aee:	4a27      	ldr	r2, [pc, #156]	@ (8000b8c <SystemClock_Config+0xc0>)
 8000af0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f001 fd71 	bl	80025dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <SystemClock_Config+0xc4>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <SystemClock_Config+0xc4>)
 8000b04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <SystemClock_Config+0xc4>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b16:	bf00      	nop
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <SystemClock_Config+0xc4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b24:	d1f8      	bne.n	8000b18 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b26:	2302      	movs	r3, #2
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fda8 	bl	8002690 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b46:	f000 f851 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	233f      	movs	r3, #63	@ 0x3f
 8000b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5e:	2340      	movs	r3, #64	@ 0x40
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f9c0 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b7a:	f000 f837 	bl	8000bec <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	@ 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	e003ffff 	.word	0xe003ffff
 8000b90:	58024800 	.word	0x58024800

08000b94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ba6:	f000 fb93 	bl	80012d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bba:	2387      	movs	r3, #135	@ 0x87
 8000bbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fbb1 	bl	8001340 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bde:	2004      	movs	r0, #4
 8000be0:	f000 fb8e 	bl	8001300 <HAL_MPU_Enable>

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c00:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	58024400 	.word	0x58024400

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f9fd 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c90:	4b3e      	ldr	r3, [pc, #248]	@ (8000d8c <SystemInit+0x100>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a3d      	ldr	r2, [pc, #244]	@ (8000d8c <SystemInit+0x100>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8000d90 <SystemInit+0x104>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d807      	bhi.n	8000cbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cac:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <SystemInit+0x104>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 030f 	bic.w	r3, r3, #15
 8000cb4:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <SystemInit+0x104>)
 8000cb6:	f043 0303 	orr.w	r3, r3, #3
 8000cba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cbc:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <SystemInit+0x108>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a34      	ldr	r2, [pc, #208]	@ (8000d94 <SystemInit+0x108>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cc8:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <SystemInit+0x108>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <SystemInit+0x108>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4930      	ldr	r1, [pc, #192]	@ (8000d94 <SystemInit+0x108>)
 8000cd4:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <SystemInit+0x10c>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cda:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <SystemInit+0x104>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <SystemInit+0x104>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 030f 	bic.w	r3, r3, #15
 8000cee:	4a28      	ldr	r2, [pc, #160]	@ (8000d90 <SystemInit+0x104>)
 8000cf0:	f043 0303 	orr.w	r3, r3, #3
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <SystemInit+0x108>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <SystemInit+0x108>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d02:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <SystemInit+0x108>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <SystemInit+0x108>)
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <SystemInit+0x110>)
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <SystemInit+0x108>)
 8000d10:	4a23      	ldr	r2, [pc, #140]	@ (8000da0 <SystemInit+0x114>)
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <SystemInit+0x108>)
 8000d16:	4a23      	ldr	r2, [pc, #140]	@ (8000da4 <SystemInit+0x118>)
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <SystemInit+0x108>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <SystemInit+0x108>)
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <SystemInit+0x118>)
 8000d24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <SystemInit+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <SystemInit+0x108>)
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000da4 <SystemInit+0x118>)
 8000d30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <SystemInit+0x108>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <SystemInit+0x108>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a15      	ldr	r2, [pc, #84]	@ (8000d94 <SystemInit+0x108>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <SystemInit+0x108>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <SystemInit+0x108>)
 8000d4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d113      	bne.n	8000d80 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <SystemInit+0x108>)
 8000d5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <SystemInit+0x108>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d64:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <SystemInit+0x11c>)
 8000d6a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d6e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <SystemInit+0x108>)
 8000d72:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000d76:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <SystemInit+0x108>)
 8000d78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d7c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	52002000 	.word	0x52002000
 8000d94:	58024400 	.word	0x58024400
 8000d98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d9c:	02020200 	.word	0x02020200
 8000da0:	01ff0000 	.word	0x01ff0000
 8000da4:	01010280 	.word	0x01010280
 8000da8:	52004000 	.word	0x52004000

08000dac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <ExitRun0Mode+0x2c>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a08      	ldr	r2, [pc, #32]	@ (8000dd8 <ExitRun0Mode+0x2c>)
 8000db6:	f023 0302 	bic.w	r3, r3, #2
 8000dba:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000dbc:	bf00      	nop
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <ExitRun0Mode+0x2c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f9      	beq.n	8000dbe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	58024800 	.word	0x58024800

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	@ (8000e70 <MX_USART2_UART_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e26:	f004 f9d1 	bl	80051cc <HAL_UART_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e30:	f7ff fedc 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e38:	f005 fadd 	bl	80063f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e42:	f7ff fed3 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e4a:	f005 fb12 	bl	8006472 <HAL_UARTEx_SetRxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f7ff feca 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <MX_USART2_UART_Init+0x90>)
 8000e5a:	f005 fa93 	bl	8006384 <HAL_UARTEx_DisableFifoMode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f7ff fec2 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000088 	.word	0x24000088
 8000e70:	40004400 	.word	0x40004400

08000e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ba      	sub	sp, #232	@ 0xe8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	22c0      	movs	r2, #192	@ 0xc0
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fb79 	bl	800658c <memset>
  if(uartHandle->Instance==USART2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a26      	ldr	r2, [pc, #152]	@ (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d145      	bne.n	8000f30 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea4:	f04f 0202 	mov.w	r2, #2
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fba6 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ec6:	f7ff fe91 	bl	8000bec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ecc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000edc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f06:	230c      	movs	r3, #12
 8000f08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_UART_MspInit+0xcc>)
 8000f2c:	f000 fa48 	bl	80013c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f30:	bf00      	nop
 8000f32:	37e8      	adds	r7, #232	@ 0xe8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020000 	.word	0x58020000

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f48:	f7ff ff30 	bl	8000dac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f4c:	f7ff fe9e 	bl	8000c8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f005 fb11 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fd53 	bl	8000a24 <main>
  bx  lr
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f88:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f8c:	08006644 	.word	0x08006644
  ldr r2, =_sbss
 8000f90:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f94:	24000120 	.word	0x24000120

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f962 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fa8:	f002 f95a 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_Init+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	4913      	ldr	r1, [pc, #76]	@ (8001008 <HAL_Init+0x6c>)
 8000fba:	5ccb      	ldrb	r3, [r1, r3]
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_Init+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <HAL_Init+0x6c>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_Init+0x70>)
 8000fde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_Init+0x74>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 f814 	bl	8001014 <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e002      	b.n	8000ffc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff6:	f7ff fdff 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400
 8001008:	080065fc 	.word	0x080065fc
 800100c:	24000004 	.word	0x24000004
 8001010:	24000000 	.word	0x24000000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e021      	b.n	800106c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <HAL_InitTick+0x64>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f939 	bl	80012b6 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f911 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_InitTick+0x68>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2400000c 	.word	0x2400000c
 8001078:	24000000 	.word	0x24000000
 800107c:	24000008 	.word	0x24000008

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	2400011c 	.word	0x2400011c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2400011c 	.word	0x2400011c

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2400000c 	.word	0x2400000c

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <__NVIC_SetPriorityGrouping+0x40>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	4313      	orrs	r3, r2
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x40>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	05fa0000 	.word	0x05fa0000

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb2 	bl	8001228 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012d4:	f3bf 8f5f 	dmb	sy
}
 80012d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_MPU_Disable+0x28>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_MPU_Disable+0x28>)
 80012e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_MPU_Disable+0x2c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	e000ed90 	.word	0xe000ed90

08001300 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001308:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_MPU_Enable+0x38>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MPU_Enable+0x3c>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	4a09      	ldr	r2, [pc, #36]	@ (800133c <HAL_MPU_Enable+0x3c>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
}
 8001322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001324:	f3bf 8f6f 	isb	sy
}
 8001328:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed90 	.word	0xe000ed90
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	785a      	ldrb	r2, [r3, #1]
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_MPU_ConfigRegion+0x7c>)
 800134e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <HAL_MPU_ConfigRegion+0x7c>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <HAL_MPU_ConfigRegion+0x7c>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_MPU_ConfigRegion+0x7c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7b1b      	ldrb	r3, [r3, #12]
 8001368:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7adb      	ldrb	r3, [r3, #11]
 800136e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7a9b      	ldrb	r3, [r3, #10]
 8001376:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7b5b      	ldrb	r3, [r3, #13]
 800137e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7b9b      	ldrb	r3, [r3, #14]
 8001386:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7bdb      	ldrb	r3, [r3, #15]
 800138e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7a5b      	ldrb	r3, [r3, #9]
 8001396:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001398:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7a1b      	ldrb	r3, [r3, #8]
 800139e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	6113      	str	r3, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed90 	.word	0xe000ed90

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ce:	4b89      	ldr	r3, [pc, #548]	@ (80015f4 <HAL_GPIO_Init+0x234>)
 80013d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013d2:	e194      	b.n	80016fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8186 	beq.w	80016f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x44>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 0201 	and.w	r2, r3, #1
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b03      	cmp	r3, #3
 8001470:	d017      	beq.n	80014a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d123      	bne.n	80014f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	69b9      	ldr	r1, [r7, #24]
 80014f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0203 	and.w	r2, r3, #3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80e0 	beq.w	80016f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_GPIO_Init+0x238>)
 800153a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800153e:	4a2e      	ldr	r2, [pc, #184]	@ (80015f8 <HAL_GPIO_Init+0x238>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001548:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <HAL_GPIO_Init+0x238>)
 800154a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a29      	ldr	r2, [pc, #164]	@ (80015fc <HAL_GPIO_Init+0x23c>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a20      	ldr	r2, [pc, #128]	@ (8001600 <HAL_GPIO_Init+0x240>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d052      	beq.n	8001628 <HAL_GPIO_Init+0x268>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_GPIO_Init+0x244>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d031      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <HAL_GPIO_Init+0x248>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x22a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <HAL_GPIO_Init+0x24c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_GPIO_Init+0x250>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <HAL_GPIO_Init+0x254>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_GPIO_Init+0x258>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x21a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a19      	ldr	r2, [pc, #100]	@ (800161c <HAL_GPIO_Init+0x25c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x216>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <HAL_GPIO_Init+0x260>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x212>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_GPIO_Init+0x264>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x20e>
 80015ca:	2309      	movs	r3, #9
 80015cc:	e02d      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015ce:	230a      	movs	r3, #10
 80015d0:	e02b      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015d2:	2308      	movs	r3, #8
 80015d4:	e029      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e027      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015da:	2306      	movs	r3, #6
 80015dc:	e025      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015de:	2305      	movs	r3, #5
 80015e0:	e023      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e01f      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e01d      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e01b      	b.n	800162a <HAL_GPIO_Init+0x26a>
 80015f2:	bf00      	nop
 80015f4:	58000080 	.word	0x58000080
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58000400 	.word	0x58000400
 8001600:	58020000 	.word	0x58020000
 8001604:	58020400 	.word	0x58020400
 8001608:	58020800 	.word	0x58020800
 800160c:	58020c00 	.word	0x58020c00
 8001610:	58021000 	.word	0x58021000
 8001614:	58021400 	.word	0x58021400
 8001618:	58021800 	.word	0x58021800
 800161c:	58021c00 	.word	0x58021c00
 8001620:	58022000 	.word	0x58022000
 8001624:	58022400 	.word	0x58022400
 8001628:	2300      	movs	r3, #0
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163a:	4938      	ldr	r1, [pc, #224]	@ (800171c <HAL_GPIO_Init+0x35c>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800166e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f ae63 	bne.w	80013d4 <HAL_GPIO_Init+0x14>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3724      	adds	r7, #36	@ 0x24
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58000400 	.word	0x58000400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	041a      	lsls	r2, r3, #16
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43d9      	mvns	r1, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	400b      	ands	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e08b      	b.n	80018b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff f8d0 	bl	8000954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	@ 0x24
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e006      	b.n	8001810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800180e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d108      	bne.n	800182a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	e007      	b.n	800183a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_I2C_Init+0x134>)
 8001846:	430b      	orrs	r3, r1
 8001848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69d9      	ldr	r1, [r3, #28]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	02008000 	.word	0x02008000

080018c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	817b      	strh	r3, [r7, #10]
 80018d2:	460b      	mov	r3, r1
 80018d4:	813b      	strh	r3, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	f040 80f9 	bne.w	8001ada <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x34>
 80018ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0ed      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_I2C_Mem_Write+0x4e>
 800190a:	2302      	movs	r3, #2
 800190c:	e0e6      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001916:	f7ff fbc7 	bl	80010a8 <HAL_GetTick>
 800191a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2319      	movs	r3, #25
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fbc9 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0d1      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2221      	movs	r2, #33	@ 0x21
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2240      	movs	r2, #64	@ 0x40
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001960:	88f8      	ldrh	r0, [r7, #6]
 8001962:	893a      	ldrh	r2, [r7, #8]
 8001964:	8979      	ldrh	r1, [r7, #10]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4603      	mov	r3, r0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fad9 	bl	8001f28 <I2C_RequestMemoryWrite>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0a9      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2bff      	cmp	r3, #255	@ 0xff
 8001990:	d90e      	bls.n	80019b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	22ff      	movs	r2, #255	@ 0xff
 8001996:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	b2da      	uxtb	r2, r3
 800199e:	8979      	ldrh	r1, [r7, #10]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fd4d 	bl	8002448 <I2C_TransferConfig>
 80019ae:	e00f      	b.n	80019d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	8979      	ldrh	r1, [r7, #10]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fd3c 	bl	8002448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fbcc 	bl	8002172 <I2C_WaitOnTXISFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e07b      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d034      	beq.n	8001a88 <HAL_I2C_Mem_Write+0x1c8>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d130      	bne.n	8001a88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2180      	movs	r1, #128	@ 0x80
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fb45 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e04d      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2bff      	cmp	r3, #255	@ 0xff
 8001a48:	d90e      	bls.n	8001a68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	22ff      	movs	r2, #255	@ 0xff
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fcf1 	bl	8002448 <I2C_TransferConfig>
 8001a66:	e00f      	b.n	8001a88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	8979      	ldrh	r1, [r7, #10]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fce0 	bl	8002448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d19e      	bne.n	80019d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fbb2 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01a      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_I2C_Mem_Write+0x224>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
  }
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	fe00e800 	.word	0xfe00e800

08001ae8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	460b      	mov	r3, r1
 8001afc:	813b      	strh	r3, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	f040 80fd 	bne.w	8001d0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_I2C_Mem_Read+0x34>
 8001b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0f1      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Mem_Read+0x4e>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0ea      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fab3 	bl	80010a8 <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2319      	movs	r3, #25
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fab5 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d5      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2222      	movs	r2, #34	@ 0x22
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2240      	movs	r2, #64	@ 0x40
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b88:	88f8      	ldrh	r0, [r7, #6]
 8001b8a:	893a      	ldrh	r2, [r7, #8]
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4603      	mov	r3, r0
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fa19 	bl	8001fd0 <I2C_RequestMemoryRead>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0ad      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2bff      	cmp	r3, #255	@ 0xff
 8001bb8:	d90e      	bls.n	8001bd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	22ff      	movs	r2, #255	@ 0xff
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	8979      	ldrh	r1, [r7, #10]
 8001bc8:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <HAL_I2C_Mem_Read+0x22c>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fc39 	bl	8002448 <I2C_TransferConfig>
 8001bd6:	e00f      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	8979      	ldrh	r1, [r7, #10]
 8001bea:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <HAL_I2C_Mem_Read+0x22c>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fc28 	bl	8002448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2104      	movs	r1, #4
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fa5c 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07c      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d034      	beq.n	8001cb8 <HAL_I2C_Mem_Read+0x1d0>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d130      	bne.n	8001cb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2180      	movs	r1, #128	@ 0x80
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fa2d 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e04d      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2bff      	cmp	r3, #255	@ 0xff
 8001c78:	d90e      	bls.n	8001c98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	22ff      	movs	r2, #255	@ 0xff
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	8979      	ldrh	r1, [r7, #10]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 fbd9 	bl	8002448 <I2C_TransferConfig>
 8001c96:	e00f      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fbc8 	bl	8002448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d19a      	bne.n	8001bf8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fa9a 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e01a      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_I2C_Mem_Read+0x230>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	80002400 	.word	0x80002400
 8001d18:	fe00e800 	.word	0xfe00e800

08001d1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	f040 80e9 	bne.w	8001f14 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	e0df      	b.n	8001f16 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2C_IsDeviceReady+0x48>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0d8      	b.n	8001f16 <HAL_I2C_IsDeviceReady+0x1fa>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_I2C_IsDeviceReady+0x72>
 8001d82:	897b      	ldrh	r3, [r7, #10]
 8001d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d88:	4b65      	ldr	r3, [pc, #404]	@ (8001f20 <HAL_I2C_IsDeviceReady+0x204>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	e004      	b.n	8001d98 <HAL_I2C_IsDeviceReady+0x7c>
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d94:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_I2C_IsDeviceReady+0x208>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f983 	bl	80010a8 <HAL_GetTick>
 8001da2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001dd0:	e034      	b.n	8001e3c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d01a      	beq.n	8001e10 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7ff f965 	bl	80010a8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <HAL_I2C_IsDeviceReady+0xd4>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e082      	b.n	8001f16 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e3c:	7fbb      	ldrb	r3, [r7, #30]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_I2C_IsDeviceReady+0x12c>
 8001e42:	7f7b      	ldrb	r3, [r7, #29]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0c4      	beq.n	8001dd2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d027      	beq.n	8001ea6 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2120      	movs	r1, #32
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f92d 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d107      	bne.n	8001e84 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e82:	e026      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	e023      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e037      	b.n	8001f16 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2210      	movs	r2, #16
 8001eac:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 f901 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	e003      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d904      	bls.n	8001eea <HAL_I2C_IsDeviceReady+0x1ce>
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	f63f af43 	bhi.w	8001d7a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	02002000 	.word	0x02002000
 8001f24:	02002800 	.word	0x02002800

08001f28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	4608      	mov	r0, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	817b      	strh	r3, [r7, #10]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	813b      	strh	r3, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	8979      	ldrh	r1, [r7, #10]
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <I2C_RequestMemoryWrite+0xa4>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fa79 	bl	8002448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	69b9      	ldr	r1, [r7, #24]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f909 	bl	8002172 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e02c      	b.n	8001fc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f7a:	e015      	b.n	8001fa8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f8ef 	bl	8002172 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e012      	b.n	8001fc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f9e:	893b      	ldrh	r3, [r7, #8]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f884 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	80002000 	.word	0x80002000

08001fd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	8979      	ldrh	r1, [r7, #10]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <I2C_RequestMemoryRead+0xa4>)
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fa26 	bl	8002448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f8b6 	bl	8002172 <I2C_WaitOnTXISFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e02c      	b.n	800206a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002016:	893b      	ldrh	r3, [r7, #8]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002020:	e015      	b.n	800204e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f89c 	bl	8002172 <I2C_WaitOnTXISFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e012      	b.n	800206a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002044:	893b      	ldrh	r3, [r7, #8]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2200      	movs	r2, #0
 8002056:	2140      	movs	r1, #64	@ 0x40
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f831 	bl	80020c0 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	80002000 	.word	0x80002000

08002078 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d103      	bne.n	8002096 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d007      	beq.n	80020b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	619a      	str	r2, [r3, #24]
  }
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	e03b      	b.n	800214a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8d6 	bl	8002288 <I2C_IsErrorOccurred>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e041      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d02d      	beq.n	800214a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7fe ffdb 	bl	80010a8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnFlagUntilTimeout+0x44>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d122      	bne.n	800214a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	429a      	cmp	r2, r3
 8002120:	d113      	bne.n	800214a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	429a      	cmp	r2, r3
 8002166:	d0b4      	beq.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800217e:	e033      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f87f 	bl	8002288 <I2C_IsErrorOccurred>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e031      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d025      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219c:	f7fe ff84 	bl	80010a8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d302      	bcc.n	80021b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11a      	bne.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d013      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d1c4      	bne.n	8002180 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e02f      	b.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f838 	bl	8002288 <I2C_IsErrorOccurred>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02d      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe ff41 	bl	80010a8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11a      	bne.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b20      	cmp	r3, #32
 8002244:	d013      	beq.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b20      	cmp	r3, #32
 800227a:	d1c8      	bne.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d068      	beq.n	8002386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2210      	movs	r2, #16
 80022ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022bc:	e049      	b.n	8002352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d045      	beq.n	8002352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c6:	f7fe feef 	bl	80010a8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <I2C_IsErrorOccurred+0x54>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d13a      	bne.n	8002352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022fe:	d121      	bne.n	8002344 <I2C_IsErrorOccurred+0xbc>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002306:	d01d      	beq.n	8002344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b20      	cmp	r3, #32
 800230c:	d01a      	beq.n	8002344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800231c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800231e:	f7fe fec3 	bl	80010a8 <HAL_GetTick>
 8002322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002324:	e00e      	b.n	8002344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002326:	f7fe febf 	bl	80010a8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b19      	cmp	r3, #25
 8002332:	d907      	bls.n	8002344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002342:	e006      	b.n	8002352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b20      	cmp	r3, #32
 8002350:	d1e9      	bne.n	8002326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b20      	cmp	r3, #32
 800235e:	d003      	beq.n	8002368 <I2C_IsErrorOccurred+0xe0>
 8002360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0aa      	beq.n	80022be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fe3b 	bl	8002078 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <I2C_IsErrorOccurred+0x1bc>)
 800240e:	400b      	ands	r3, r1
 8002410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800243a:	4618      	mov	r0, r3
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	fe00e800 	.word	0xfe00e800

08002448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	4613      	mov	r3, r2
 8002458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002460:	7a7b      	ldrb	r3, [r7, #9]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002468:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	4313      	orrs	r3, r2
 8002472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002476:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	0d5b      	lsrs	r3, r3, #21
 8002482:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <I2C_TransferConfig+0x60>)
 8002488:	430b      	orrs	r3, r1
 800248a:	43db      	mvns	r3, r3
 800248c:	ea02 0103 	and.w	r1, r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	03ff63ff 	.word	0x03ff63ff

080024ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d138      	bne.n	8002534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e032      	b.n	8002536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b20      	cmp	r3, #32
 8002556:	d139      	bne.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002562:	2302      	movs	r3, #2
 8002564:	e033      	b.n	80025ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2224      	movs	r2, #36	@ 0x24
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d00a      	beq.n	8002606 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e040      	b.n	8002684 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e03e      	b.n	8002684 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002606:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800260e:	491f      	ldr	r1, [pc, #124]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4313      	orrs	r3, r2
 8002614:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002616:	f7fe fd47 	bl	80010a8 <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800261c:	e009      	b.n	8002632 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800261e:	f7fe fd43 	bl	80010a8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800262c:	d901      	bls.n	8002632 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e028      	b.n	8002684 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002632:	4b16      	ldr	r3, [pc, #88]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800263e:	d1ee      	bne.n	800261e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b1e      	cmp	r3, #30
 8002644:	d008      	beq.n	8002658 <HAL_PWREx_ConfigSupply+0x7c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b2e      	cmp	r3, #46	@ 0x2e
 800264a:	d005      	beq.n	8002658 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b1d      	cmp	r3, #29
 8002650:	d002      	beq.n	8002658 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b2d      	cmp	r3, #45	@ 0x2d
 8002656:	d114      	bne.n	8002682 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002658:	f7fe fd26 	bl	80010a8 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800265e:	e009      	b.n	8002674 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002660:	f7fe fd22 	bl	80010a8 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800266e:	d901      	bls.n	8002674 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_PWREx_ConfigSupply+0xb0>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002680:	d1ee      	bne.n	8002660 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024800 	.word	0x58024800

08002690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f000 bc1f 	b.w	8002ee2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80b3 	beq.w	8002818 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b2:	4b95      	ldr	r3, [pc, #596]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026bc:	4b92      	ldr	r3, [pc, #584]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d007      	beq.n	80026d8 <HAL_RCC_OscConfig+0x48>
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d112      	bne.n	80026f4 <HAL_RCC_OscConfig+0x64>
 80026ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8098 	beq.w	8002816 <HAL_RCC_OscConfig+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8093 	bne.w	8002816 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e3f6      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x7c>
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a81      	ldr	r2, [pc, #516]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e058      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0xaa>
 8002714:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b79      	ldr	r3, [pc, #484]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a78      	ldr	r2, [pc, #480]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002726:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a75      	ldr	r2, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	e041      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002742:	d112      	bne.n	800276a <HAL_RCC_OscConfig+0xda>
 8002744:	4b70      	ldr	r3, [pc, #448]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6f      	ldr	r2, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800274a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b6d      	ldr	r3, [pc, #436]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6c      	ldr	r2, [pc, #432]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002756:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a69      	ldr	r2, [pc, #420]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e029      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0x10a>
 8002774:	4b64      	ldr	r3, [pc, #400]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a63      	ldr	r2, [pc, #396]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800277a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a60      	ldr	r2, [pc, #384]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b5e      	ldr	r3, [pc, #376]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5d      	ldr	r2, [pc, #372]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e011      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
 800279a:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5a      	ldr	r2, [pc, #360]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b58      	ldr	r3, [pc, #352]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a54      	ldr	r2, [pc, #336]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d013      	beq.n	80027ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fc6f 	bl	80010a8 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ce:	f7fe fc6b 	bl	80010a8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	@ 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e380      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027e0:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x13e>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fc5b 	bl	80010a8 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f6:	f7fe fc57 	bl	80010a8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	@ 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e36c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002808:	4b3f      	ldr	r3, [pc, #252]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x166>
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 808c 	beq.w	800293e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800282e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002830:	4b35      	ldr	r3, [pc, #212]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_RCC_OscConfig+0x1bc>
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b18      	cmp	r3, #24
 8002840:	d137      	bne.n	80028b2 <HAL_RCC_OscConfig+0x222>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d132      	bne.n	80028b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x1d4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e33e      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002864:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 0219 	bic.w	r2, r3, #25
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4925      	ldr	r1, [pc, #148]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fc17 	bl	80010a8 <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fc13 	bl	80010a8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e328      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002890:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4917      	ldr	r1, [pc, #92]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b0:	e045      	b.n	800293e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0219 	bic.w	r2, r3, #25
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4910      	ldr	r1, [pc, #64]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fbec 	bl	80010a8 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe fbe8 	bl	80010a8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e2fd      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	4901      	ldr	r1, [pc, #4]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
 8002906:	e01a      	b.n	800293e <HAL_RCC_OscConfig+0x2ae>
 8002908:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290c:	4b97      	ldr	r3, [pc, #604]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a96      	ldr	r2, [pc, #600]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fbc6 	bl	80010a8 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fbc2 	bl	80010a8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e2d7      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002932:	4b8e      	ldr	r3, [pc, #568]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06a      	beq.n	8002a20 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	4b88      	ldr	r3, [pc, #544]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002952:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002954:	4b85      	ldr	r3, [pc, #532]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d007      	beq.n	8002970 <HAL_RCC_OscConfig+0x2e0>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b18      	cmp	r3, #24
 8002964:	d11b      	bne.n	800299e <HAL_RCC_OscConfig+0x30e>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d116      	bne.n	800299e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002970:	4b7e      	ldr	r3, [pc, #504]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x2f8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b80      	cmp	r3, #128	@ 0x80
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e2ac      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002988:	4b78      	ldr	r3, [pc, #480]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	4975      	ldr	r1, [pc, #468]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800299c:	e040      	b.n	8002a20 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d023      	beq.n	80029ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a6:	4b71      	ldr	r3, [pc, #452]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a70      	ldr	r2, [pc, #448]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fb79 	bl	80010a8 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ba:	f7fe fb75 	bl	80010a8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e28a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029cc:	4b67      	ldr	r3, [pc, #412]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d8:	4b64      	ldr	r3, [pc, #400]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4961      	ldr	r1, [pc, #388]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
 80029ec:	e018      	b.n	8002a20 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029ee:	4b5f      	ldr	r3, [pc, #380]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 80029f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fb55 	bl	80010a8 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a02:	f7fe fb51 	bl	80010a8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e266      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a14:	4b55      	ldr	r3, [pc, #340]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d036      	beq.n	8002a9a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d019      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a34:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a38:	4a4c      	ldr	r2, [pc, #304]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fb32 	bl	80010a8 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fb2e 	bl	80010a8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e243      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5a:	4b44      	ldr	r3, [pc, #272]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x3b8>
 8002a66:	e018      	b.n	8002a9a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fb18 	bl	80010a8 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fb14 	bl	80010a8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e229      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a8e:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d036      	beq.n	8002b14 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aae:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aba:	f7fe faf5 	bl	80010a8 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac2:	f7fe faf1 	bl	80010a8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e206      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x432>
 8002ae0:	e018      	b.n	8002b14 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fadb 	bl	80010a8 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7fe fad7 	bl	80010a8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1ec      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80af 	beq.w	8002c80 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCC_OscConfig+0x4e0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <HAL_RCC_OscConfig+0x4e0>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fabb 	bl	80010a8 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fab7 	bl	80010a8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	@ 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1cc      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b48:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_OscConfig+0x4e0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4e4>
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a02      	ldr	r2, [pc, #8]	@ (8002b6c <HAL_RCC_OscConfig+0x4dc>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e05b      	b.n	8002c22 <HAL_RCC_OscConfig+0x592>
 8002b6a:	bf00      	nop
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58024800 	.word	0x58024800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x512>
 8002b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b80:	4a9c      	ldr	r2, [pc, #624]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b88:	4b9a      	ldr	r3, [pc, #616]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a99      	ldr	r2, [pc, #612]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b94:	4b97      	ldr	r3, [pc, #604]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a96      	ldr	r2, [pc, #600]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba0:	e03f      	b.n	8002c22 <HAL_RCC_OscConfig+0x592>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d112      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x540>
 8002baa:	4b92      	ldr	r3, [pc, #584]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	4a91      	ldr	r2, [pc, #580]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	4a8e      	ldr	r2, [pc, #568]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bce:	e028      	b.n	8002c22 <HAL_RCC_OscConfig+0x592>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b85      	cmp	r3, #133	@ 0x85
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x56e>
 8002bd8:	4b86      	ldr	r3, [pc, #536]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bdc:	4a85      	ldr	r2, [pc, #532]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be4:	4b83      	ldr	r3, [pc, #524]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a82      	ldr	r2, [pc, #520]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	4b80      	ldr	r3, [pc, #512]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a7f      	ldr	r2, [pc, #508]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	e011      	b.n	8002c22 <HAL_RCC_OscConfig+0x592>
 8002bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a7c      	ldr	r2, [pc, #496]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a79      	ldr	r2, [pc, #484]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c16:	4b77      	ldr	r3, [pc, #476]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a76      	ldr	r2, [pc, #472]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fa3d 	bl	80010a8 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe fa39 	bl	80010a8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e14c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c48:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ee      	beq.n	8002c32 <HAL_RCC_OscConfig+0x5a2>
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fa27 	bl	80010a8 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe fa23 	bl	80010a8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e136      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c74:	4b5f      	ldr	r3, [pc, #380]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 812b 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	f000 80bb 	beq.w	8002e0e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	f040 8095 	bne.w	8002dcc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b54      	ldr	r3, [pc, #336]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a53      	ldr	r2, [pc, #332]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002ca8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe f9fb 	bl	80010a8 <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f9f7 	bl	80010a8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e10c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cd8:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <HAL_RCC_OscConfig+0x768>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	4942      	ldr	r1, [pc, #264]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	3b01      	subs	r3, #1
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d1e:	4935      	ldr	r1, [pc, #212]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d24:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d34:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_RCC_OscConfig+0x76c>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d3c:	00d2      	lsls	r2, r2, #3
 8002d3e:	492d      	ldr	r1, [pc, #180]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	f023 020c 	bic.w	r2, r3, #12
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	4928      	ldr	r1, [pc, #160]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d56:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	f023 0202 	bic.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	4924      	ldr	r1, [pc, #144]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d68:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d74:	4b1f      	ldr	r3, [pc, #124]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d80:	4b1c      	ldr	r3, [pc, #112]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	4a1b      	ldr	r2, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	4a18      	ldr	r2, [pc, #96]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f980 	bl	80010a8 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f97c 	bl	80010a8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e091      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x71c>
 8002dca:	e089      	b.n	8002ee0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f966 	bl	80010a8 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dde:	e00f      	b.n	8002e00 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f962 	bl	80010a8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e077      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
 8002df2:	bf00      	nop
 8002df4:	58024400 	.word	0x58024400
 8002df8:	fffffc0c 	.word	0xfffffc0c
 8002dfc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e00:	4b3a      	ldr	r3, [pc, #232]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e9      	bne.n	8002de0 <HAL_RCC_OscConfig+0x750>
 8002e0c:	e068      	b.n	8002ee0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e14:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d031      	beq.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d12a      	bne.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d122      	bne.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d11a      	bne.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	0a5b      	lsrs	r3, r3, #9
 8002e54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d111      	bne.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d108      	bne.n	8002e86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	0e1b      	lsrs	r3, r3, #24
 8002e78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e02b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	08db      	lsrs	r3, r3, #3
 8002e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e94:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d01f      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ea0:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	4a11      	ldr	r2, [pc, #68]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eac:	f7fe f8fc 	bl	80010a8 <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002eb2:	bf00      	nop
 8002eb4:	f7fe f8f8 	bl	80010a8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d0f9      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <HAL_RCC_OscConfig+0x860>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ecc:	00d2      	lsls	r2, r2, #3
 8002ece:	4907      	ldr	r1, [pc, #28]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <HAL_RCC_OscConfig+0x85c>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3730      	adds	r7, #48	@ 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	ffff0007 	.word	0xffff0007

08002ef4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e19c      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b8a      	ldr	r3, [pc, #552]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b87      	ldr	r3, [pc, #540]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	4985      	ldr	r1, [pc, #532]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b83      	ldr	r3, [pc, #524]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e184      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	4b7b      	ldr	r3, [pc, #492]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d908      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f54:	4b78      	ldr	r3, [pc, #480]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	4975      	ldr	r1, [pc, #468]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	4b70      	ldr	r3, [pc, #448]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d908      	bls.n	8002f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f82:	4b6d      	ldr	r3, [pc, #436]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	496a      	ldr	r1, [pc, #424]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	4b64      	ldr	r3, [pc, #400]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d908      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	495e      	ldr	r1, [pc, #376]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	4b59      	ldr	r3, [pc, #356]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d908      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fde:	4b56      	ldr	r3, [pc, #344]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4953      	ldr	r1, [pc, #332]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b4d      	ldr	r3, [pc, #308]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	429a      	cmp	r2, r3
 800300a:	d908      	bls.n	800301e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f023 020f 	bic.w	r2, r3, #15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4947      	ldr	r1, [pc, #284]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 800301a:	4313      	orrs	r3, r2
 800301c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d055      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800302a:	4b43      	ldr	r3, [pc, #268]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4940      	ldr	r1, [pc, #256]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003038:	4313      	orrs	r3, r2
 800303a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d107      	bne.n	8003054 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003044:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d121      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0f6      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d107      	bne.n	800306c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800305c:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d115      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0ea      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d107      	bne.n	8003084 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003074:	4b30      	ldr	r3, [pc, #192]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0de      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d6      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003094:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4925      	ldr	r1, [pc, #148]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a6:	f7fd ffff 	bl	80010a8 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd fffb 	bl	80010a8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0be      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d1eb      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d208      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f023 020f 	bic.w	r2, r3, #15
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	490e      	ldr	r1, [pc, #56]	@ (8003138 <HAL_RCC_ClockConfig+0x244>)
 8003100:	4313      	orrs	r3, r2
 8003102:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d214      	bcs.n	800313c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 020f 	bic.w	r2, r3, #15
 800311a:	4906      	ldr	r1, [pc, #24]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <HAL_RCC_ClockConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e086      	b.n	8003242 <HAL_RCC_ClockConfig+0x34e>
 8003134:	52002000 	.word	0x52002000
 8003138:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003154:	429a      	cmp	r2, r3
 8003156:	d208      	bcs.n	800316a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003158:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	4939      	ldr	r1, [pc, #228]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 8003166:	4313      	orrs	r3, r2
 8003168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4b34      	ldr	r3, [pc, #208]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003182:	429a      	cmp	r2, r3
 8003184:	d208      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003186:	4b31      	ldr	r3, [pc, #196]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	492e      	ldr	r1, [pc, #184]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	4b28      	ldr	r3, [pc, #160]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d208      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4922      	ldr	r1, [pc, #136]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d208      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4917      	ldr	r1, [pc, #92]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80031f4:	f000 f834 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	4912      	ldr	r1, [pc, #72]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <HAL_RCC_ClockConfig+0x358>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	4a0d      	ldr	r2, [pc, #52]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 800321c:	5cd3      	ldrb	r3, [r2, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <HAL_RCC_ClockConfig+0x360>)
 800322a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_RCC_ClockConfig+0x364>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x368>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd feec 	bl	8001014 <HAL_InitTick>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	58024400 	.word	0x58024400
 8003250:	080065fc 	.word	0x080065fc
 8003254:	24000004 	.word	0x24000004
 8003258:	24000000 	.word	0x24000000
 800325c:	24000008 	.word	0x24000008

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003266:	4bb3      	ldr	r3, [pc, #716]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800326e:	2b18      	cmp	r3, #24
 8003270:	f200 8155 	bhi.w	800351e <HAL_RCC_GetSysClockFreq+0x2be>
 8003274:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032e1 	.word	0x080032e1
 8003280:	0800351f 	.word	0x0800351f
 8003284:	0800351f 	.word	0x0800351f
 8003288:	0800351f 	.word	0x0800351f
 800328c:	0800351f 	.word	0x0800351f
 8003290:	0800351f 	.word	0x0800351f
 8003294:	0800351f 	.word	0x0800351f
 8003298:	0800351f 	.word	0x0800351f
 800329c:	08003307 	.word	0x08003307
 80032a0:	0800351f 	.word	0x0800351f
 80032a4:	0800351f 	.word	0x0800351f
 80032a8:	0800351f 	.word	0x0800351f
 80032ac:	0800351f 	.word	0x0800351f
 80032b0:	0800351f 	.word	0x0800351f
 80032b4:	0800351f 	.word	0x0800351f
 80032b8:	0800351f 	.word	0x0800351f
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800351f 	.word	0x0800351f
 80032c4:	0800351f 	.word	0x0800351f
 80032c8:	0800351f 	.word	0x0800351f
 80032cc:	0800351f 	.word	0x0800351f
 80032d0:	0800351f 	.word	0x0800351f
 80032d4:	0800351f 	.word	0x0800351f
 80032d8:	0800351f 	.word	0x0800351f
 80032dc:	08003313 	.word	0x08003313
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e0:	4b94      	ldr	r3, [pc, #592]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032ec:	4b91      	ldr	r3, [pc, #580]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	4a90      	ldr	r2, [pc, #576]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032fe:	e111      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003300:	4b8d      	ldr	r3, [pc, #564]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003302:	61bb      	str	r3, [r7, #24]
      break;
 8003304:	e10e      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003306:	4b8d      	ldr	r3, [pc, #564]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003308:	61bb      	str	r3, [r7, #24]
      break;
 800330a:	e10b      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800330c:	4b8c      	ldr	r3, [pc, #560]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800330e:	61bb      	str	r3, [r7, #24]
      break;
 8003310:	e108      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003312:	4b88      	ldr	r3, [pc, #544]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800331c:	4b85      	ldr	r3, [pc, #532]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003326:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003328:	4b82      	ldr	r3, [pc, #520]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003332:	4b80      	ldr	r3, [pc, #512]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80e1 	beq.w	8003518 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b02      	cmp	r3, #2
 800335a:	f000 8083 	beq.w	8003464 <HAL_RCC_GetSysClockFreq+0x204>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b02      	cmp	r3, #2
 8003362:	f200 80a1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x114>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d056      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003372:	e099      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003374:	4b6f      	ldr	r3, [pc, #444]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02d      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003380:	4b6c      	ldr	r3, [pc, #432]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	4a6b      	ldr	r2, [pc, #428]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
 8003390:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033aa:	4b62      	ldr	r3, [pc, #392]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80033be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033da:	e087      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003548 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ee:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003402:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003544 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341e:	e065      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2ec>
 800342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003442:	ed97 6a02 	vldr	s12, [r7, #8]
 8003446:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003462:	e043      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003550 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003476:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003486:	ed97 6a02 	vldr	s12, [r7, #8]
 800348a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800348e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034a6:	e021      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800354c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034f6:	3301      	adds	r3, #1
 80034f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003504:	edd7 6a07 	vldr	s13, [r7, #28]
 8003508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003510:	ee17 3a90 	vmov	r3, s15
 8003514:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003516:	e005      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
      break;
 800351c:	e002      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800351e:	4b07      	ldr	r3, [pc, #28]	@ (800353c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003520:	61bb      	str	r3, [r7, #24]
      break;
 8003522:	bf00      	nop
  }

  return sysclockfreq;
 8003524:	69bb      	ldr	r3, [r7, #24]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	@ 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
 8003538:	03d09000 	.word	0x03d09000
 800353c:	003d0900 	.word	0x003d0900
 8003540:	016e3600 	.word	0x016e3600
 8003544:	46000000 	.word	0x46000000
 8003548:	4c742400 	.word	0x4c742400
 800354c:	4a742400 	.word	0x4a742400
 8003550:	4bb71b00 	.word	0x4bb71b00

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800355a:	f7ff fe81 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490f      	ldr	r1, [pc, #60]	@ (80035a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a07      	ldr	r2, [pc, #28]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003590:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003592:	4a07      	ldr	r2, [pc, #28]	@ (80035b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x58>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	58024400 	.word	0x58024400
 80035a8:	080065fc 	.word	0x080065fc
 80035ac:	24000004 	.word	0x24000004
 80035b0:	24000000 	.word	0x24000000

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80035b8:	f7ff ffcc 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	080065fc 	.word	0x080065fc

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80035e4:	f7ff ffb6 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	080065fc 	.word	0x080065fc

0800360c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b0c8      	sub	sp, #288	@ 0x120
 8003612:	af00      	add	r7, sp, #0
 8003614:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361e:	2300      	movs	r3, #0
 8003620:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003630:	2500      	movs	r5, #0
 8003632:	ea54 0305 	orrs.w	r3, r4, r5
 8003636:	d049      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800363c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003642:	d02f      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003648:	d828      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800364e:	d01a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003654:	d822      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365e:	d007      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003660:	e01c      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003662:	4ba7      	ldr	r3, [pc, #668]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	4aa6      	ldr	r2, [pc, #664]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800366e:	e01a      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003674:	3308      	adds	r3, #8
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fc43 	bl	8004f04 <RCCEx_PLL2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003684:	e00f      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800368a:	3328      	adds	r3, #40	@ 0x28
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fcea 	bl	8005068 <RCCEx_PLL3_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ae:	4b94      	ldr	r3, [pc, #592]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036bc:	4a90      	ldr	r2, [pc, #576]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036d8:	f04f 0900 	mov.w	r9, #0
 80036dc:	ea58 0309 	orrs.w	r3, r8, r9
 80036e0:	d047      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d82a      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036ec:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003709 	.word	0x08003709
 80036f8:	08003717 	.word	0x08003717
 80036fc:	0800372d 	.word	0x0800372d
 8003700:	0800374b 	.word	0x0800374b
 8003704:	0800374b 	.word	0x0800374b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4b7d      	ldr	r3, [pc, #500]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	4a7c      	ldr	r2, [pc, #496]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003714:	e01a      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800371a:	3308      	adds	r3, #8
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fbf0 	bl	8004f04 <RCCEx_PLL2_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800372a:	e00f      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003730:	3328      	adds	r3, #40	@ 0x28
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fc97 	bl	8005068 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003740:	e004      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800374a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003754:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003758:	f023 0107 	bic.w	r1, r3, #7
 800375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	4a67      	ldr	r2, [pc, #412]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003764:	430b      	orrs	r3, r1
 8003766:	6513      	str	r3, [r2, #80]	@ 0x50
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800376e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	ea5a 030b 	orrs.w	r3, sl, fp
 8003786:	d054      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003792:	d036      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003794:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003798:	d82f      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800379a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379e:	d032      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a4:	d829      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037a8:	d02f      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80037aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037ac:	d825      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037ae:	2b80      	cmp	r3, #128	@ 0x80
 80037b0:	d018      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80037b2:	2b80      	cmp	r3, #128	@ 0x80
 80037b4:	d821      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	d007      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80037be:	e01c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037cc:	e01e      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d2:	3308      	adds	r3, #8
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fb94 	bl	8004f04 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037e2:	e013      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e8:	3328      	adds	r3, #40	@ 0x28
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fc3b 	bl	8005068 <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037f8:	e008      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003814:	4b3a      	ldr	r3, [pc, #232]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003818:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800381c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	4a37      	ldr	r2, [pc, #220]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003824:	430b      	orrs	r3, r1
 8003826:	6513      	str	r3, [r2, #80]	@ 0x50
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800382e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800383e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003848:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d05c      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800385c:	d03b      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800385e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003862:	d834      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003868:	d037      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386e:	d82e      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003870:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003874:	d033      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003876:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800387a:	d828      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003880:	d01a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d822      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d007      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003892:	e01c      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038a0:	e01e      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a6:	3308      	adds	r3, #8
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fb2a 	bl	8004f04 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038b6:	e013      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038bc:	3328      	adds	r3, #40	@ 0x28
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fbd1 	bl	8005068 <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038d4:	e004      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10d      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	4a02      	ldr	r2, [pc, #8]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80038fc:	e006      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x300>
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003908:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003922:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003926:	460b      	mov	r3, r1
 8003928:	4313      	orrs	r3, r2
 800392a:	d03a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	2b30      	cmp	r3, #48	@ 0x30
 8003934:	d01f      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003936:	2b30      	cmp	r3, #48	@ 0x30
 8003938:	d819      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800393a:	2b20      	cmp	r3, #32
 800393c:	d00c      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800393e:	2b20      	cmp	r3, #32
 8003940:	d815      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003946:	2b10      	cmp	r3, #16
 8003948:	d111      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394a:	4bae      	ldr	r3, [pc, #696]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	4aad      	ldr	r2, [pc, #692]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003956:	e011      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395c:	3308      	adds	r3, #8
 800395e:	2102      	movs	r1, #2
 8003960:	4618      	mov	r0, r3
 8003962:	f001 facf 	bl	8004f04 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800396c:	e006      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003974:	e002      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800397a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003984:	4b9f      	ldr	r3, [pc, #636]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003988:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	4a9c      	ldr	r2, [pc, #624]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003994:	430b      	orrs	r3, r1
 8003996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800399e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039bc:	460b      	mov	r3, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	d051      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039cc:	d035      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039d2:	d82e      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039d8:	d031      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80039da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039de:	d828      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e4:	d01a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ea:	d822      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d007      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80039f6:	e01c      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b82      	ldr	r3, [pc, #520]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4a81      	ldr	r2, [pc, #516]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a04:	e01c      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fa78 	bl	8004f04 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e011      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a20:	3328      	adds	r3, #40	@ 0x28
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fb1f 	bl	8005068 <RCCEx_PLL3_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a30:	e006      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a38:	e002      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a48:	4b6e      	ldr	r3, [pc, #440]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a56:	4a6b      	ldr	r2, [pc, #428]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d053      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a90:	d033      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a96:	d82c      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9c:	d02f      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aa2:	d826      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003aa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aa8:	d02b      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aae:	d820      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ab4:	d012      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aba:	d81a      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aca:	3308      	adds	r3, #8
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 fa18 	bl	8004f04 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ada:	e015      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae0:	3328      	adds	r3, #40	@ 0x28
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fabf 	bl	8005068 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b10:	4b3c      	ldr	r3, [pc, #240]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b1e:	4a39      	ldr	r2, [pc, #228]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b44:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d060      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b56:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003b5a:	d039      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003b5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003b60:	d832      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b66:	d035      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b6c:	d82c      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d031      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b78:	d826      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b7e:	d02d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003b80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b84:	d820      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b8a:	d012      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b90:	d81a      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d024      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9a:	d115      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f9ad 	bl	8004f04 <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bb0:	e017      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb6:	3328      	adds	r3, #40	@ 0x28
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 fa54 	bl	8005068 <RCCEx_PLL3_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bd0:	bf00      	nop
 8003bd2:	e006      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bd4:	bf00      	nop
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e002      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bfa:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d037      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3a:	d00e      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c40:	d816      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4c:	4bc4      	ldr	r3, [pc, #784]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	4ac3      	ldr	r2, [pc, #780]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c58:	e00f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f94e 	bl	8004f04 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c82:	4bb7      	ldr	r3, [pc, #732]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c90:	4ab3      	ldr	r2, [pc, #716]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c96:	e003      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d039      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d81c      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003ce1 	.word	0x08003ce1
 8003cd8:	08003cef 	.word	0x08003cef
 8003cdc:	08003d0d 	.word	0x08003d0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b9f      	ldr	r3, [pc, #636]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	4a9e      	ldr	r2, [pc, #632]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f904 	bl	8004f04 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d16:	4b92      	ldr	r3, [pc, #584]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	f023 0103 	bic.w	r1, r3, #3
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d24:	4a8e      	ldr	r2, [pc, #568]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f000 8099 	beq.w	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d56:	4b83      	ldr	r3, [pc, #524]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a82      	ldr	r2, [pc, #520]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d62:	f7fd f9a1 	bl	80010a8 <HAL_GetTick>
 8003d66:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd f99c 	bl	80010a8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	@ 0x64
 8003d7a:	d903      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d84:	4b77      	ldr	r3, [pc, #476]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ed      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d173      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d98:	4b71      	ldr	r3, [pc, #452]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003da4:	4053      	eors	r3, r2
 8003da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dae:	4b6c      	ldr	r3, [pc, #432]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dba:	4b69      	ldr	r3, [pc, #420]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a68      	ldr	r2, [pc, #416]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dd2:	4a63      	ldr	r2, [pc, #396]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de6:	d118      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd f95e 	bl	80010a8 <HAL_GetTick>
 8003dec:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df0:	e00d      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd f959 	bl	80010a8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d903      	bls.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003e0c:	e005      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0e:	4b54      	ldr	r3, [pc, #336]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0eb      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d129      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e32:	d10e      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e34:	4b4a      	ldr	r3, [pc, #296]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e44:	091a      	lsrs	r2, r3, #4
 8003e46:	4b48      	ldr	r3, [pc, #288]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	4a45      	ldr	r2, [pc, #276]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6113      	str	r3, [r2, #16]
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e5c:	6113      	str	r3, [r2, #16]
 8003e5e:	4b40      	ldr	r3, [pc, #256]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e60:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f002 0301 	and.w	r3, r2, #1
 8003e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f000 8090 	beq.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb2:	2b28      	cmp	r3, #40	@ 0x28
 8003eb4:	d870      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003fa1 	.word	0x08003fa1
 8003ec0:	08003f99 	.word	0x08003f99
 8003ec4:	08003f99 	.word	0x08003f99
 8003ec8:	08003f99 	.word	0x08003f99
 8003ecc:	08003f99 	.word	0x08003f99
 8003ed0:	08003f99 	.word	0x08003f99
 8003ed4:	08003f99 	.word	0x08003f99
 8003ed8:	08003f99 	.word	0x08003f99
 8003edc:	08003f6d 	.word	0x08003f6d
 8003ee0:	08003f99 	.word	0x08003f99
 8003ee4:	08003f99 	.word	0x08003f99
 8003ee8:	08003f99 	.word	0x08003f99
 8003eec:	08003f99 	.word	0x08003f99
 8003ef0:	08003f99 	.word	0x08003f99
 8003ef4:	08003f99 	.word	0x08003f99
 8003ef8:	08003f99 	.word	0x08003f99
 8003efc:	08003f83 	.word	0x08003f83
 8003f00:	08003f99 	.word	0x08003f99
 8003f04:	08003f99 	.word	0x08003f99
 8003f08:	08003f99 	.word	0x08003f99
 8003f0c:	08003f99 	.word	0x08003f99
 8003f10:	08003f99 	.word	0x08003f99
 8003f14:	08003f99 	.word	0x08003f99
 8003f18:	08003f99 	.word	0x08003f99
 8003f1c:	08003fa1 	.word	0x08003fa1
 8003f20:	08003f99 	.word	0x08003f99
 8003f24:	08003f99 	.word	0x08003f99
 8003f28:	08003f99 	.word	0x08003f99
 8003f2c:	08003f99 	.word	0x08003f99
 8003f30:	08003f99 	.word	0x08003f99
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	08003f99 	.word	0x08003f99
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	08003f99 	.word	0x08003f99
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	08003f99 	.word	0x08003f99
 8003f4c:	08003f99 	.word	0x08003f99
 8003f50:	08003f99 	.word	0x08003f99
 8003f54:	08003f99 	.word	0x08003f99
 8003f58:	08003f99 	.word	0x08003f99
 8003f5c:	08003fa1 	.word	0x08003fa1
 8003f60:	58024400 	.word	0x58024400
 8003f64:	58024800 	.word	0x58024800
 8003f68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	3308      	adds	r3, #8
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 ffc5 	bl	8004f04 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f80:	e00f      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f86:	3328      	adds	r3, #40	@ 0x28
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f86c 	bl	8005068 <RCCEx_PLL3_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f96:	e004      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003faa:	4bc0      	ldr	r3, [pc, #768]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fba:	4abc      	ldr	r2, [pc, #752]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f002 0302 	and.w	r3, r2, #2
 8003fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fe0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d043      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d824      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08004015 	.word	0x08004015
 8004004:	0800402b 	.word	0x0800402b
 8004008:	08004049 	.word	0x08004049
 800400c:	08004049 	.word	0x08004049
 8004010:	08004049 	.word	0x08004049
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004018:	3308      	adds	r3, #8
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f000 ff71 	bl	8004f04 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402e:	3328      	adds	r3, #40	@ 0x28
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f818 	bl	8005068 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004052:	4b96      	ldr	r3, [pc, #600]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	f023 0107 	bic.w	r1, r3, #7
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004062:	4a92      	ldr	r2, [pc, #584]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6553      	str	r3, [r2, #84]	@ 0x54
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800406e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f002 0304 	and.w	r3, r2, #4
 800407e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004088:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d043      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800409a:	2b05      	cmp	r3, #5
 800409c:	d824      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800409e:	a201      	add	r2, pc, #4	@ (adr r2, 80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040f1 	.word	0x080040f1
 80040a8:	080040bd 	.word	0x080040bd
 80040ac:	080040d3 	.word	0x080040d3
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040f1 	.word	0x080040f1
 80040b8:	080040f1 	.word	0x080040f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c0:	3308      	adds	r3, #8
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 ff1d 	bl	8004f04 <RCCEx_PLL2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ffc4 	bl	8005068 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fa:	4b6c      	ldr	r3, [pc, #432]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	f023 0107 	bic.w	r1, r3, #7
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410a:	4a68      	ldr	r2, [pc, #416]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004116:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f002 0320 	and.w	r3, r2, #32
 8004126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d055      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004146:	d033      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414c:	d82c      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004152:	d02f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004158:	d826      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800415a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800415e:	d02b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004164:	d820      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800416a:	d012      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800416c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004170:	d81a      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d022      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800417a:	d115      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004180:	3308      	adds	r3, #8
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 febd 	bl	8004f04 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004190:	e015      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004196:	3328      	adds	r3, #40	@ 0x28
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ff64 	bl	8005068 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041a6:	e00a      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041ae:	e006      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041b0:	bf00      	nop
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c6:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d6:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6553      	str	r3, [r2, #84]	@ 0x54
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d058      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800420a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004212:	d033      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004214:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004218:	d82c      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421e:	d02f      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004224:	d826      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800422a:	d02b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800422c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004230:	d820      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004236:	d012      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800423c:	d81a      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d022      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d115      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424c:	3308      	adds	r3, #8
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fe57 	bl	8004f04 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800425c:	e015      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fefe 	bl	8005068 <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004272:	e00a      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800427a:	e006      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800427c:	bf00      	nop
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800429e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042a2:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d055      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042e4:	d033      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80042e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042ea:	d82c      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f0:	d02f      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f6:	d826      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042fc:	d02b      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80042fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004302:	d820      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004308:	d012      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800430e:	d81a      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d022      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004318:	d115      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431e:	3308      	adds	r3, #8
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fdee 	bl	8004f04 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800432e:	e015      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004334:	3328      	adds	r3, #40	@ 0x28
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fe95 	bl	8005068 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004344:	e00a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004364:	4ba1      	ldr	r3, [pc, #644]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004370:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004374:	4a9d      	ldr	r2, [pc, #628]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6593      	str	r3, [r2, #88]	@ 0x58
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 0308 	and.w	r3, r2, #8
 8004390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800439a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d01e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b6:	3328      	adds	r3, #40	@ 0x28
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fe54 	bl	8005068 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043cc:	4b87      	ldr	r3, [pc, #540]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043dc:	4a83      	ldr	r2, [pc, #524]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f002 0310 	and.w	r3, r2, #16
 80043ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d01e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800440a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440e:	d10c      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004414:	3328      	adds	r3, #40	@ 0x28
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe25 	bl	8005068 <RCCEx_PLL3_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800442a:	4b70      	ldr	r3, [pc, #448]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800443a:	4a6c      	ldr	r2, [pc, #432]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004456:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800445a:	460b      	mov	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	d03e      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800446c:	d022      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004472:	d81b      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447c:	d00b      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800447e:	e015      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004484:	3308      	adds	r3, #8
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd3b 	bl	8004f04 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fde2 	bl	8005068 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044be:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044ce:	4a47      	ldr	r2, [pc, #284]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ec:	2300      	movs	r3, #0
 80044ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004506:	d01f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004508:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800450c:	d818      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004518:	d007      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451c:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004528:	e00f      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452e:	3328      	adds	r3, #40	@ 0x28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fd98 	bl	8005068 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004562:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6553      	str	r3, [r2, #84]	@ 0x54
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800456e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800457e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004580:	2300      	movs	r3, #0
 8004582:	677b      	str	r3, [r7, #116]	@ 0x74
 8004584:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d034      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4a11      	ldr	r2, [pc, #68]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b2:	3308      	adds	r3, #8
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fca4 	bl	8004f04 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045c2:	e003      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e2:	4a02      	ldr	r2, [pc, #8]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004606:	2300      	movs	r3, #0
 8004608:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800460a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d00c      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fd23 	bl	8005068 <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800463a:	663b      	str	r3, [r7, #96]	@ 0x60
 800463c:	2300      	movs	r3, #0
 800463e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004640:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d038      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004656:	d018      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465c:	d811      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800465e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004662:	d014      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d80b      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4bc3      	ldr	r3, [pc, #780]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	4ac2      	ldr	r2, [pc, #776]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004680:	e008      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004688:	e004      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800469c:	4bb9      	ldr	r3, [pc, #740]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	4ab5      	ldr	r2, [pc, #724]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046b2:	e003      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ca:	2300      	movs	r3, #0
 80046cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046d8:	4baa      	ldr	r3, [pc, #680]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046e6:	4aa7      	ldr	r2, [pc, #668]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fa:	2300      	movs	r3, #0
 80046fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80046fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004708:	4b9e      	ldr	r3, [pc, #632]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800470c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	4a9b      	ldr	r2, [pc, #620]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472a:	2300      	movs	r3, #0
 800472c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004738:	4b92      	ldr	r3, [pc, #584]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004746:	4a8f      	ldr	r2, [pc, #572]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004758:	643b      	str	r3, [r7, #64]	@ 0x40
 800475a:	2300      	movs	r3, #0
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004768:	4b86      	ldr	r3, [pc, #536]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4a85      	ldr	r2, [pc, #532]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800476e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004772:	6113      	str	r3, [r2, #16]
 8004774:	4b83      	ldr	r3, [pc, #524]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004776:	6919      	ldr	r1, [r3, #16]
 8004778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800477c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004780:	4a80      	ldr	r2, [pc, #512]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004782:	430b      	orrs	r3, r1
 8004784:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004794:	2300      	movs	r3, #0
 8004796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004798:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047a2:	4b78      	ldr	r3, [pc, #480]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	4a74      	ldr	r2, [pc, #464]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c4:	2300      	movs	r3, #0
 80047c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e2:	4a68      	ldr	r2, [pc, #416]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	2100      	movs	r1, #0
 80047f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d011      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004808:	3308      	adds	r3, #8
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb79 	bl	8004f04 <RCCEx_PLL2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	2100      	movs	r1, #0
 8004832:	6239      	str	r1, [r7, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
 800483a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d011      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004848:	3308      	adds	r3, #8
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fb59 	bl	8004f04 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	2100      	movs	r1, #0
 8004872:	61b9      	str	r1, [r7, #24]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d011      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004888:	3308      	adds	r3, #8
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fb39 	bl	8004f04 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	2100      	movs	r1, #0
 80048b2:	6139      	str	r1, [r7, #16]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d011      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c8:	3328      	adds	r3, #40	@ 0x28
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fbcb 	bl	8005068 <RCCEx_PLL3_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80048d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	2100      	movs	r1, #0
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d011      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004908:	3328      	adds	r3, #40	@ 0x28
 800490a:	2101      	movs	r1, #1
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fbab 	bl	8005068 <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004918:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	2100      	movs	r1, #0
 8004932:	6039      	str	r1, [r7, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d011      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004948:	3328      	adds	r3, #40	@ 0x28
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fb8b 	bl	8005068 <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004964:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004968:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
}
 8004976:	4618      	mov	r0, r3
 8004978:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400

08004988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800498c:	f7fe fde2 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4904      	ldr	r1, [pc, #16]	@ (80049b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	58024400 	.word	0x58024400
 80049b0:	080065fc 	.word	0x080065fc

080049b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	@ 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049c6:	4b9f      	ldr	r3, [pc, #636]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	0b1b      	lsrs	r3, r3, #12
 80049cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049de:	4b99      	ldr	r3, [pc, #612]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	08db      	lsrs	r3, r3, #3
 80049e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8111 	beq.w	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f000 8083 	beq.w	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f200 80a1 	bhi.w	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d056      	beq.n	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a1e:	e099      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a20:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02d      	beq.n	8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a2c:	4b85      	ldr	r3, [pc, #532]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	08db      	lsrs	r3, r3, #3
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	4a84      	ldr	r2, [pc, #528]	@ (8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b7b      	ldr	r3, [pc, #492]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a86:	e087      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e065      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e043      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b48      	ldr	r3, [pc, #288]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	e021      	b.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b98:	4b2a      	ldr	r3, [pc, #168]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	0a5b      	lsrs	r3, r3, #9
 8004b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbe:	ee17 2a90 	vmov	r2, s15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 2a90 	vmov	r2, s15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bf4:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1a:	ee17 2a90 	vmov	r2, s15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	609a      	str	r2, [r3, #8]
}
 8004c36:	bf00      	nop
 8004c38:	3724      	adds	r7, #36	@ 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	58024400 	.word	0x58024400
 8004c48:	03d09000 	.word	0x03d09000
 8004c4c:	46000000 	.word	0x46000000
 8004c50:	4c742400 	.word	0x4c742400
 8004c54:	4a742400 	.word	0x4a742400
 8004c58:	4bb71b00 	.word	0x4bb71b00

08004c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c64:	4ba1      	ldr	r3, [pc, #644]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	0d1b      	lsrs	r3, r3, #20
 8004c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c86:	4b99      	ldr	r3, [pc, #612]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8111 	beq.w	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	f000 8083 	beq.w	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	f200 80a1 	bhi.w	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d056      	beq.n	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cc6:	e099      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc8:	4b88      	ldr	r3, [pc, #544]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02d      	beq.n	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cd4:	4b85      	ldr	r3, [pc, #532]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	4a84      	ldr	r2, [pc, #528]	@ (8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d2e:	e087      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b6a      	ldr	r3, [pc, #424]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d72:	e065      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	e043      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b48      	ldr	r3, [pc, #288]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfa:	e021      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b37      	ldr	r3, [pc, #220]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e40:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	0a5b      	lsrs	r3, r3, #9
 8004e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e66:	ee17 2a90 	vmov	r2, s15
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e94:	ee17 2a90 	vmov	r2, s15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e9c:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	0e1b      	lsrs	r3, r3, #24
 8004ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec2:	ee17 2a90 	vmov	r2, s15
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	3724      	adds	r7, #36	@ 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	03d09000 	.word	0x03d09000
 8004ef4:	46000000 	.word	0x46000000
 8004ef8:	4c742400 	.word	0x4c742400
 8004efc:	4a742400 	.word	0x4a742400
 8004f00:	4bb71b00 	.word	0x4bb71b00

08004f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f12:	4b53      	ldr	r3, [pc, #332]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d101      	bne.n	8004f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e099      	b.n	8005056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f22:	4b4f      	ldr	r3, [pc, #316]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4e      	ldr	r2, [pc, #312]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2e:	f7fc f8bb 	bl	80010a8 <HAL_GetTick>
 8004f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f36:	f7fc f8b7 	bl	80010a8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e086      	b.n	8005056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f48:	4b45      	ldr	r3, [pc, #276]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f54:	4b42      	ldr	r3, [pc, #264]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	493f      	ldr	r1, [pc, #252]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	025b      	lsls	r3, r3, #9
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	061b      	lsls	r3, r3, #24
 8004f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f98:	4931      	ldr	r1, [pc, #196]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f9e:	4b30      	ldr	r3, [pc, #192]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	492d      	ldr	r1, [pc, #180]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f023 0220 	bic.w	r2, r3, #32
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	4928      	ldr	r1, [pc, #160]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fc2:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd2:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <RCCEx_PLL2_Config+0x160>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69d2      	ldr	r2, [r2, #28]
 8004fda:	00d2      	lsls	r2, r2, #3
 8004fdc:	4920      	ldr	r1, [pc, #128]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	4a19      	ldr	r2, [pc, #100]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005000:	e00f      	b.n	8005022 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005008:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005014:	e005      	b.n	8005022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005016:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	4a11      	ldr	r2, [pc, #68]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800501c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005022:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a0e      	ldr	r2, [pc, #56]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 8005028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800502c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502e:	f7fc f83b 	bl	80010a8 <HAL_GetTick>
 8005032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005034:	e008      	b.n	8005048 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005036:	f7fc f837 	bl	80010a8 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <RCCEx_PLL2_Config+0x15c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	ffff0007 	.word	0xffff0007

08005068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b03      	cmp	r3, #3
 8005080:	d101      	bne.n	8005086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e099      	b.n	80051ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005086:	4b4f      	ldr	r3, [pc, #316]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4e      	ldr	r2, [pc, #312]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005092:	f7fc f809 	bl	80010a8 <HAL_GetTick>
 8005096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005098:	e008      	b.n	80050ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800509a:	f7fc f805 	bl	80010a8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e086      	b.n	80051ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050ac:	4b45      	ldr	r3, [pc, #276]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050b8:	4b42      	ldr	r3, [pc, #264]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	051b      	lsls	r3, r3, #20
 80050c6:	493f      	ldr	r1, [pc, #252]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	3b01      	subs	r3, #1
 80050dc:	025b      	lsls	r3, r3, #9
 80050de:	b29b      	uxth	r3, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050fc:	4931      	ldr	r1, [pc, #196]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005102:	4b30      	ldr	r3, [pc, #192]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	492d      	ldr	r1, [pc, #180]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005114:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4928      	ldr	r1, [pc, #160]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005126:	4b27      	ldr	r3, [pc, #156]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a26      	ldr	r2, [pc, #152]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005132:	4b24      	ldr	r3, [pc, #144]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <RCCEx_PLL3_Config+0x160>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	69d2      	ldr	r2, [r2, #28]
 800513e:	00d2      	lsls	r2, r2, #3
 8005140:	4920      	ldr	r1, [pc, #128]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005146:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005158:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a19      	ldr	r2, [pc, #100]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800515e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005164:	e00f      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800516c:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005172:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005178:	e005      	b.n	8005186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800517a:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005192:	f7fb ff89 	bl	80010a8 <HAL_GetTick>
 8005196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005198:	e008      	b.n	80051ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800519a:	f7fb ff85 	bl	80010a8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e006      	b.n	80051ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	58024400 	.word	0x58024400
 80051c8:	ffff0007 	.word	0xffff0007

080051cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e042      	b.n	8005264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fb fe3f 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2224      	movs	r2, #36	@ 0x24
 80051fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fe94 	bl	8005f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f825 	bl	800526c <UART_SetConfig>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e01b      	b.n	8005264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800523a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800524a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 ff13 	bl	8006088 <UART_CheckIdleState>
 8005262:	4603      	mov	r3, r0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800526c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005270:	b092      	sub	sp, #72	@ 0x48
 8005272:	af00      	add	r7, sp, #0
 8005274:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	431a      	orrs	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4313      	orrs	r3, r2
 8005292:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4bbe      	ldr	r3, [pc, #760]	@ (8005594 <UART_SetConfig+0x328>)
 800529c:	4013      	ands	r3, r2
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4ab3      	ldr	r2, [pc, #716]	@ (8005598 <UART_SetConfig+0x32c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d4:	4313      	orrs	r3, r2
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	4baf      	ldr	r3, [pc, #700]	@ (800559c <UART_SetConfig+0x330>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	f023 010f 	bic.w	r1, r3, #15
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4aa6      	ldr	r2, [pc, #664]	@ (80055a0 <UART_SetConfig+0x334>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d177      	bne.n	80053fc <UART_SetConfig+0x190>
 800530c:	4ba5      	ldr	r3, [pc, #660]	@ (80055a4 <UART_SetConfig+0x338>)
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005314:	2b28      	cmp	r3, #40	@ 0x28
 8005316:	d86d      	bhi.n	80053f4 <UART_SetConfig+0x188>
 8005318:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0xb4>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	080053c5 	.word	0x080053c5
 8005324:	080053f5 	.word	0x080053f5
 8005328:	080053f5 	.word	0x080053f5
 800532c:	080053f5 	.word	0x080053f5
 8005330:	080053f5 	.word	0x080053f5
 8005334:	080053f5 	.word	0x080053f5
 8005338:	080053f5 	.word	0x080053f5
 800533c:	080053f5 	.word	0x080053f5
 8005340:	080053cd 	.word	0x080053cd
 8005344:	080053f5 	.word	0x080053f5
 8005348:	080053f5 	.word	0x080053f5
 800534c:	080053f5 	.word	0x080053f5
 8005350:	080053f5 	.word	0x080053f5
 8005354:	080053f5 	.word	0x080053f5
 8005358:	080053f5 	.word	0x080053f5
 800535c:	080053f5 	.word	0x080053f5
 8005360:	080053d5 	.word	0x080053d5
 8005364:	080053f5 	.word	0x080053f5
 8005368:	080053f5 	.word	0x080053f5
 800536c:	080053f5 	.word	0x080053f5
 8005370:	080053f5 	.word	0x080053f5
 8005374:	080053f5 	.word	0x080053f5
 8005378:	080053f5 	.word	0x080053f5
 800537c:	080053f5 	.word	0x080053f5
 8005380:	080053dd 	.word	0x080053dd
 8005384:	080053f5 	.word	0x080053f5
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080053f5 	.word	0x080053f5
 8005390:	080053f5 	.word	0x080053f5
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053f5 	.word	0x080053f5
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e326      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e322      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e31e      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e31a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e316      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053ec:	2340      	movs	r3, #64	@ 0x40
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e312      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e30e      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a69      	ldr	r2, [pc, #420]	@ (80055a8 <UART_SetConfig+0x33c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d130      	bne.n	8005468 <UART_SetConfig+0x1fc>
 8005406:	4b67      	ldr	r3, [pc, #412]	@ (80055a4 <UART_SetConfig+0x338>)
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b05      	cmp	r3, #5
 8005410:	d826      	bhi.n	8005460 <UART_SetConfig+0x1f4>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0x1ac>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005431 	.word	0x08005431
 800541c:	08005439 	.word	0x08005439
 8005420:	08005441 	.word	0x08005441
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e2f0      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e2ec      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e2e8      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e2e4      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e2e0      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e2dc      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e2d8      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4f      	ldr	r2, [pc, #316]	@ (80055ac <UART_SetConfig+0x340>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d130      	bne.n	80054d4 <UART_SetConfig+0x268>
 8005472:	4b4c      	ldr	r3, [pc, #304]	@ (80055a4 <UART_SetConfig+0x338>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b05      	cmp	r3, #5
 800547c:	d826      	bhi.n	80054cc <UART_SetConfig+0x260>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x218>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e2ba      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e2b6      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e2b2      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e2ae      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054bc:	2320      	movs	r3, #32
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e2aa      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e2a6      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e2a2      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a35      	ldr	r2, [pc, #212]	@ (80055b0 <UART_SetConfig+0x344>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d130      	bne.n	8005540 <UART_SetConfig+0x2d4>
 80054de:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <UART_SetConfig+0x338>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d826      	bhi.n	8005538 <UART_SetConfig+0x2cc>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x284>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005519 	.word	0x08005519
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	2300      	movs	r3, #0
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e284      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e280      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e27c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e278      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005528:	2320      	movs	r3, #32
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e274      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005530:	2340      	movs	r3, #64	@ 0x40
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e270      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e26c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <UART_SetConfig+0x348>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d142      	bne.n	80055d0 <UART_SetConfig+0x364>
 800554a:	4b16      	ldr	r3, [pc, #88]	@ (80055a4 <UART_SetConfig+0x338>)
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b05      	cmp	r3, #5
 8005554:	d838      	bhi.n	80055c8 <UART_SetConfig+0x35c>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x2f0>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005575 	.word	0x08005575
 8005560:	0800557d 	.word	0x0800557d
 8005564:	08005585 	.word	0x08005585
 8005568:	0800558d 	.word	0x0800558d
 800556c:	080055b9 	.word	0x080055b9
 8005570:	080055c1 	.word	0x080055c1
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e24e      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e24a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e246      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e242      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005594:	cfff69f3 	.word	0xcfff69f3
 8005598:	58000c00 	.word	0x58000c00
 800559c:	11fff4ff 	.word	0x11fff4ff
 80055a0:	40011000 	.word	0x40011000
 80055a4:	58024400 	.word	0x58024400
 80055a8:	40004400 	.word	0x40004400
 80055ac:	40004800 	.word	0x40004800
 80055b0:	40004c00 	.word	0x40004c00
 80055b4:	40005000 	.word	0x40005000
 80055b8:	2320      	movs	r3, #32
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e22c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80055c0:	2340      	movs	r3, #64	@ 0x40
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e228      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e224      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4ab1      	ldr	r2, [pc, #708]	@ (800589c <UART_SetConfig+0x630>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d176      	bne.n	80056c8 <UART_SetConfig+0x45c>
 80055da:	4bb1      	ldr	r3, [pc, #708]	@ (80058a0 <UART_SetConfig+0x634>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e2:	2b28      	cmp	r3, #40	@ 0x28
 80055e4:	d86c      	bhi.n	80056c0 <UART_SetConfig+0x454>
 80055e6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0x380>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005691 	.word	0x08005691
 80055f0:	080056c1 	.word	0x080056c1
 80055f4:	080056c1 	.word	0x080056c1
 80055f8:	080056c1 	.word	0x080056c1
 80055fc:	080056c1 	.word	0x080056c1
 8005600:	080056c1 	.word	0x080056c1
 8005604:	080056c1 	.word	0x080056c1
 8005608:	080056c1 	.word	0x080056c1
 800560c:	08005699 	.word	0x08005699
 8005610:	080056c1 	.word	0x080056c1
 8005614:	080056c1 	.word	0x080056c1
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056c1 	.word	0x080056c1
 8005624:	080056c1 	.word	0x080056c1
 8005628:	080056c1 	.word	0x080056c1
 800562c:	080056a1 	.word	0x080056a1
 8005630:	080056c1 	.word	0x080056c1
 8005634:	080056c1 	.word	0x080056c1
 8005638:	080056c1 	.word	0x080056c1
 800563c:	080056c1 	.word	0x080056c1
 8005640:	080056c1 	.word	0x080056c1
 8005644:	080056c1 	.word	0x080056c1
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056a9 	.word	0x080056a9
 8005650:	080056c1 	.word	0x080056c1
 8005654:	080056c1 	.word	0x080056c1
 8005658:	080056c1 	.word	0x080056c1
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	080056c1 	.word	0x080056c1
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056b1 	.word	0x080056b1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056c1 	.word	0x080056c1
 8005678:	080056c1 	.word	0x080056c1
 800567c:	080056c1 	.word	0x080056c1
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c1 	.word	0x080056c1
 8005688:	080056c1 	.word	0x080056c1
 800568c:	080056b9 	.word	0x080056b9
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005696:	e1c0      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005698:	2304      	movs	r3, #4
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569e:	e1bc      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056a0:	2308      	movs	r3, #8
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e1b8      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e1b4      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056b0:	2320      	movs	r3, #32
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e1b0      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056b8:	2340      	movs	r3, #64	@ 0x40
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e1ac      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056c0:	2380      	movs	r3, #128	@ 0x80
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e1a8      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a75      	ldr	r2, [pc, #468]	@ (80058a4 <UART_SetConfig+0x638>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d130      	bne.n	8005734 <UART_SetConfig+0x4c8>
 80056d2:	4b73      	ldr	r3, [pc, #460]	@ (80058a0 <UART_SetConfig+0x634>)
 80056d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b05      	cmp	r3, #5
 80056dc:	d826      	bhi.n	800572c <UART_SetConfig+0x4c0>
 80056de:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <UART_SetConfig+0x478>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056fd 	.word	0x080056fd
 80056e8:	08005705 	.word	0x08005705
 80056ec:	0800570d 	.word	0x0800570d
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005702:	e18a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005704:	2304      	movs	r3, #4
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e186      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800570c:	2308      	movs	r3, #8
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e182      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005714:	2310      	movs	r3, #16
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e17e      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800571c:	2320      	movs	r3, #32
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e17a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005724:	2340      	movs	r3, #64	@ 0x40
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e176      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e172      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5b      	ldr	r2, [pc, #364]	@ (80058a8 <UART_SetConfig+0x63c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d130      	bne.n	80057a0 <UART_SetConfig+0x534>
 800573e:	4b58      	ldr	r3, [pc, #352]	@ (80058a0 <UART_SetConfig+0x634>)
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	2b05      	cmp	r3, #5
 8005748:	d826      	bhi.n	8005798 <UART_SetConfig+0x52c>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <UART_SetConfig+0x4e4>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005769 	.word	0x08005769
 8005754:	08005771 	.word	0x08005771
 8005758:	08005779 	.word	0x08005779
 800575c:	08005781 	.word	0x08005781
 8005760:	08005789 	.word	0x08005789
 8005764:	08005791 	.word	0x08005791
 8005768:	2300      	movs	r3, #0
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e154      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005770:	2304      	movs	r3, #4
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e150      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005778:	2308      	movs	r3, #8
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e14c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005780:	2310      	movs	r3, #16
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e148      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005788:	2320      	movs	r3, #32
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e144      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005790:	2340      	movs	r3, #64	@ 0x40
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e140      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e13c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a41      	ldr	r2, [pc, #260]	@ (80058ac <UART_SetConfig+0x640>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f040 8082 	bne.w	80058b0 <UART_SetConfig+0x644>
 80057ac:	4b3c      	ldr	r3, [pc, #240]	@ (80058a0 <UART_SetConfig+0x634>)
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057b4:	2b28      	cmp	r3, #40	@ 0x28
 80057b6:	d86d      	bhi.n	8005894 <UART_SetConfig+0x628>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <UART_SetConfig+0x554>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	08005865 	.word	0x08005865
 80057c4:	08005895 	.word	0x08005895
 80057c8:	08005895 	.word	0x08005895
 80057cc:	08005895 	.word	0x08005895
 80057d0:	08005895 	.word	0x08005895
 80057d4:	08005895 	.word	0x08005895
 80057d8:	08005895 	.word	0x08005895
 80057dc:	08005895 	.word	0x08005895
 80057e0:	0800586d 	.word	0x0800586d
 80057e4:	08005895 	.word	0x08005895
 80057e8:	08005895 	.word	0x08005895
 80057ec:	08005895 	.word	0x08005895
 80057f0:	08005895 	.word	0x08005895
 80057f4:	08005895 	.word	0x08005895
 80057f8:	08005895 	.word	0x08005895
 80057fc:	08005895 	.word	0x08005895
 8005800:	08005875 	.word	0x08005875
 8005804:	08005895 	.word	0x08005895
 8005808:	08005895 	.word	0x08005895
 800580c:	08005895 	.word	0x08005895
 8005810:	08005895 	.word	0x08005895
 8005814:	08005895 	.word	0x08005895
 8005818:	08005895 	.word	0x08005895
 800581c:	08005895 	.word	0x08005895
 8005820:	0800587d 	.word	0x0800587d
 8005824:	08005895 	.word	0x08005895
 8005828:	08005895 	.word	0x08005895
 800582c:	08005895 	.word	0x08005895
 8005830:	08005895 	.word	0x08005895
 8005834:	08005895 	.word	0x08005895
 8005838:	08005895 	.word	0x08005895
 800583c:	08005895 	.word	0x08005895
 8005840:	08005885 	.word	0x08005885
 8005844:	08005895 	.word	0x08005895
 8005848:	08005895 	.word	0x08005895
 800584c:	08005895 	.word	0x08005895
 8005850:	08005895 	.word	0x08005895
 8005854:	08005895 	.word	0x08005895
 8005858:	08005895 	.word	0x08005895
 800585c:	08005895 	.word	0x08005895
 8005860:	0800588d 	.word	0x0800588d
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e0d6      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e0d2      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e0ce      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e0ca      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005884:	2320      	movs	r3, #32
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e0c6      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800588c:	2340      	movs	r3, #64	@ 0x40
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e0c2      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005894:	2380      	movs	r3, #128	@ 0x80
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e0be      	b.n	8005a1a <UART_SetConfig+0x7ae>
 800589c:	40011400 	.word	0x40011400
 80058a0:	58024400 	.word	0x58024400
 80058a4:	40007800 	.word	0x40007800
 80058a8:	40007c00 	.word	0x40007c00
 80058ac:	40011800 	.word	0x40011800
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4aad      	ldr	r2, [pc, #692]	@ (8005b6c <UART_SetConfig+0x900>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d176      	bne.n	80059a8 <UART_SetConfig+0x73c>
 80058ba:	4bad      	ldr	r3, [pc, #692]	@ (8005b70 <UART_SetConfig+0x904>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c2:	2b28      	cmp	r3, #40	@ 0x28
 80058c4:	d86c      	bhi.n	80059a0 <UART_SetConfig+0x734>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0x660>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005971 	.word	0x08005971
 80058d0:	080059a1 	.word	0x080059a1
 80058d4:	080059a1 	.word	0x080059a1
 80058d8:	080059a1 	.word	0x080059a1
 80058dc:	080059a1 	.word	0x080059a1
 80058e0:	080059a1 	.word	0x080059a1
 80058e4:	080059a1 	.word	0x080059a1
 80058e8:	080059a1 	.word	0x080059a1
 80058ec:	08005979 	.word	0x08005979
 80058f0:	080059a1 	.word	0x080059a1
 80058f4:	080059a1 	.word	0x080059a1
 80058f8:	080059a1 	.word	0x080059a1
 80058fc:	080059a1 	.word	0x080059a1
 8005900:	080059a1 	.word	0x080059a1
 8005904:	080059a1 	.word	0x080059a1
 8005908:	080059a1 	.word	0x080059a1
 800590c:	08005981 	.word	0x08005981
 8005910:	080059a1 	.word	0x080059a1
 8005914:	080059a1 	.word	0x080059a1
 8005918:	080059a1 	.word	0x080059a1
 800591c:	080059a1 	.word	0x080059a1
 8005920:	080059a1 	.word	0x080059a1
 8005924:	080059a1 	.word	0x080059a1
 8005928:	080059a1 	.word	0x080059a1
 800592c:	08005989 	.word	0x08005989
 8005930:	080059a1 	.word	0x080059a1
 8005934:	080059a1 	.word	0x080059a1
 8005938:	080059a1 	.word	0x080059a1
 800593c:	080059a1 	.word	0x080059a1
 8005940:	080059a1 	.word	0x080059a1
 8005944:	080059a1 	.word	0x080059a1
 8005948:	080059a1 	.word	0x080059a1
 800594c:	08005991 	.word	0x08005991
 8005950:	080059a1 	.word	0x080059a1
 8005954:	080059a1 	.word	0x080059a1
 8005958:	080059a1 	.word	0x080059a1
 800595c:	080059a1 	.word	0x080059a1
 8005960:	080059a1 	.word	0x080059a1
 8005964:	080059a1 	.word	0x080059a1
 8005968:	080059a1 	.word	0x080059a1
 800596c:	08005999 	.word	0x08005999
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e050      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e04c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e048      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e044      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005990:	2320      	movs	r3, #32
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e040      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005998:	2340      	movs	r3, #64	@ 0x40
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e03c      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e038      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a71      	ldr	r2, [pc, #452]	@ (8005b74 <UART_SetConfig+0x908>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d130      	bne.n	8005a14 <UART_SetConfig+0x7a8>
 80059b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005b70 <UART_SetConfig+0x904>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d826      	bhi.n	8005a0c <UART_SetConfig+0x7a0>
 80059be:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0x758>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059dd 	.word	0x080059dd
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	080059ed 	.word	0x080059ed
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e01a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e016      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e012      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e00e      	b.n	8005a1a <UART_SetConfig+0x7ae>
 80059fc:	2320      	movs	r3, #32
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e00a      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005a04:	2340      	movs	r3, #64	@ 0x40
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e006      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005a0c:	2380      	movs	r3, #128	@ 0x80
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e002      	b.n	8005a1a <UART_SetConfig+0x7ae>
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a55      	ldr	r2, [pc, #340]	@ (8005b74 <UART_SetConfig+0x908>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	f040 80f8 	bne.w	8005c16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	dc46      	bgt.n	8005abc <UART_SetConfig+0x850>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	db75      	blt.n	8005b1e <UART_SetConfig+0x8b2>
 8005a32:	3b02      	subs	r3, #2
 8005a34:	2b1e      	cmp	r3, #30
 8005a36:	d872      	bhi.n	8005b1e <UART_SetConfig+0x8b2>
 8005a38:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <UART_SetConfig+0x7d4>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005ac3 	.word	0x08005ac3
 8005a44:	08005b1f 	.word	0x08005b1f
 8005a48:	08005acb 	.word	0x08005acb
 8005a4c:	08005b1f 	.word	0x08005b1f
 8005a50:	08005b1f 	.word	0x08005b1f
 8005a54:	08005b1f 	.word	0x08005b1f
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005b1f 	.word	0x08005b1f
 8005a60:	08005b1f 	.word	0x08005b1f
 8005a64:	08005b1f 	.word	0x08005b1f
 8005a68:	08005b1f 	.word	0x08005b1f
 8005a6c:	08005b1f 	.word	0x08005b1f
 8005a70:	08005b1f 	.word	0x08005b1f
 8005a74:	08005b1f 	.word	0x08005b1f
 8005a78:	08005aeb 	.word	0x08005aeb
 8005a7c:	08005b1f 	.word	0x08005b1f
 8005a80:	08005b1f 	.word	0x08005b1f
 8005a84:	08005b1f 	.word	0x08005b1f
 8005a88:	08005b1f 	.word	0x08005b1f
 8005a8c:	08005b1f 	.word	0x08005b1f
 8005a90:	08005b1f 	.word	0x08005b1f
 8005a94:	08005b1f 	.word	0x08005b1f
 8005a98:	08005b1f 	.word	0x08005b1f
 8005a9c:	08005b1f 	.word	0x08005b1f
 8005aa0:	08005b1f 	.word	0x08005b1f
 8005aa4:	08005b1f 	.word	0x08005b1f
 8005aa8:	08005b1f 	.word	0x08005b1f
 8005aac:	08005b1f 	.word	0x08005b1f
 8005ab0:	08005b1f 	.word	0x08005b1f
 8005ab4:	08005b1f 	.word	0x08005b1f
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d02a      	beq.n	8005b16 <UART_SetConfig+0x8aa>
 8005ac0:	e02d      	b.n	8005b1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ac2:	f7fe ff61 	bl	8004988 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e02f      	b.n	8005b2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe ff70 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad8:	e027      	b.n	8005b2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff f8bc 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae8:	e01f      	b.n	8005b2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aea:	4b21      	ldr	r3, [pc, #132]	@ (8005b70 <UART_SetConfig+0x904>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b70 <UART_SetConfig+0x904>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	08db      	lsrs	r3, r3, #3
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <UART_SetConfig+0x90c>)
 8005b02:	fa22 f303 	lsr.w	r3, r2, r3
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b08:	e00f      	b.n	8005b2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <UART_SetConfig+0x90c>)
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0e:	e00c      	b.n	8005b2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b10:	4b1a      	ldr	r3, [pc, #104]	@ (8005b7c <UART_SetConfig+0x910>)
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1c:	e005      	b.n	8005b2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 81ee 	beq.w	8005f0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <UART_SetConfig+0x914>)
 8005b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b44:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d305      	bcc.n	8005b62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d910      	bls.n	8005b84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b68:	e1d1      	b.n	8005f0e <UART_SetConfig+0xca2>
 8005b6a:	bf00      	nop
 8005b6c:	40011c00 	.word	0x40011c00
 8005b70:	58024400 	.word	0x58024400
 8005b74:	58000c00 	.word	0x58000c00
 8005b78:	03d09000 	.word	0x03d09000
 8005b7c:	003d0900 	.word	0x003d0900
 8005b80:	0800660c 	.word	0x0800660c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b86:	2200      	movs	r2, #0
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	4ac0      	ldr	r2, [pc, #768]	@ (8005e94 <UART_SetConfig+0xc28>)
 8005b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2200      	movs	r2, #0
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ba6:	f7fa fba1 	bl	80002ec <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	020b      	lsls	r3, r1, #8
 8005bbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bc0:	0202      	lsls	r2, r0, #8
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	6849      	ldr	r1, [r1, #4]
 8005bc6:	0849      	lsrs	r1, r1, #1
 8005bc8:	2000      	movs	r0, #0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	4605      	mov	r5, r0
 8005bce:	eb12 0804 	adds.w	r8, r2, r4
 8005bd2:	eb43 0905 	adc.w	r9, r3, r5
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	469a      	mov	sl, r3
 8005bde:	4693      	mov	fp, r2
 8005be0:	4652      	mov	r2, sl
 8005be2:	465b      	mov	r3, fp
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa fb80 	bl	80002ec <__aeabi_uldivmod>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bfa:	d308      	bcc.n	8005c0e <UART_SetConfig+0x9a2>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c02:	d204      	bcs.n	8005c0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	e17f      	b.n	8005f0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c14:	e17b      	b.n	8005f0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c1e:	f040 80bd 	bne.w	8005d9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005c22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	dc48      	bgt.n	8005cbc <UART_SetConfig+0xa50>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db7b      	blt.n	8005d26 <UART_SetConfig+0xaba>
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d879      	bhi.n	8005d26 <UART_SetConfig+0xaba>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x9cc>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005cc3 	.word	0x08005cc3
 8005c3c:	08005ccb 	.word	0x08005ccb
 8005c40:	08005d27 	.word	0x08005d27
 8005c44:	08005d27 	.word	0x08005d27
 8005c48:	08005cd3 	.word	0x08005cd3
 8005c4c:	08005d27 	.word	0x08005d27
 8005c50:	08005d27 	.word	0x08005d27
 8005c54:	08005d27 	.word	0x08005d27
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005d27 	.word	0x08005d27
 8005c60:	08005d27 	.word	0x08005d27
 8005c64:	08005d27 	.word	0x08005d27
 8005c68:	08005d27 	.word	0x08005d27
 8005c6c:	08005d27 	.word	0x08005d27
 8005c70:	08005d27 	.word	0x08005d27
 8005c74:	08005d27 	.word	0x08005d27
 8005c78:	08005cf3 	.word	0x08005cf3
 8005c7c:	08005d27 	.word	0x08005d27
 8005c80:	08005d27 	.word	0x08005d27
 8005c84:	08005d27 	.word	0x08005d27
 8005c88:	08005d27 	.word	0x08005d27
 8005c8c:	08005d27 	.word	0x08005d27
 8005c90:	08005d27 	.word	0x08005d27
 8005c94:	08005d27 	.word	0x08005d27
 8005c98:	08005d27 	.word	0x08005d27
 8005c9c:	08005d27 	.word	0x08005d27
 8005ca0:	08005d27 	.word	0x08005d27
 8005ca4:	08005d27 	.word	0x08005d27
 8005ca8:	08005d27 	.word	0x08005d27
 8005cac:	08005d27 	.word	0x08005d27
 8005cb0:	08005d27 	.word	0x08005d27
 8005cb4:	08005d27 	.word	0x08005d27
 8005cb8:	08005d19 	.word	0x08005d19
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	d02e      	beq.n	8005d1e <UART_SetConfig+0xab2>
 8005cc0:	e031      	b.n	8005d26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7fd fc77 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005cc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cc8:	e033      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cca:	f7fd fc89 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8005cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e02f      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fe6c 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce0:	e027      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce2:	f107 0318 	add.w	r3, r7, #24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe ffb8 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf0:	e01f      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf2:	4b69      	ldr	r3, [pc, #420]	@ (8005e98 <UART_SetConfig+0xc2c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cfe:	4b66      	ldr	r3, [pc, #408]	@ (8005e98 <UART_SetConfig+0xc2c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	4a64      	ldr	r2, [pc, #400]	@ (8005e9c <UART_SetConfig+0xc30>)
 8005d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d10:	e00f      	b.n	8005d32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005d12:	4b62      	ldr	r3, [pc, #392]	@ (8005e9c <UART_SetConfig+0xc30>)
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d16:	e00c      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d18:	4b61      	ldr	r3, [pc, #388]	@ (8005ea0 <UART_SetConfig+0xc34>)
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80ea 	beq.w	8005f0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	4a55      	ldr	r2, [pc, #340]	@ (8005e94 <UART_SetConfig+0xc28>)
 8005d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4c:	005a      	lsls	r2, r3, #1
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d916      	bls.n	8005d94 <UART_SetConfig+0xb28>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d212      	bcs.n	8005d94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f023 030f 	bic.w	r3, r3, #15
 8005d76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d86:	4313      	orrs	r3, r2
 8005d88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e0bc      	b.n	8005f0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d9a:	e0b8      	b.n	8005f0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	dc4b      	bgt.n	8005e3c <UART_SetConfig+0xbd0>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f2c0 8087 	blt.w	8005eb8 <UART_SetConfig+0xc4c>
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	f200 8084 	bhi.w	8005eb8 <UART_SetConfig+0xc4c>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <UART_SetConfig+0xb4c>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005e43 	.word	0x08005e43
 8005dbc:	08005e4b 	.word	0x08005e4b
 8005dc0:	08005eb9 	.word	0x08005eb9
 8005dc4:	08005eb9 	.word	0x08005eb9
 8005dc8:	08005e53 	.word	0x08005e53
 8005dcc:	08005eb9 	.word	0x08005eb9
 8005dd0:	08005eb9 	.word	0x08005eb9
 8005dd4:	08005eb9 	.word	0x08005eb9
 8005dd8:	08005e63 	.word	0x08005e63
 8005ddc:	08005eb9 	.word	0x08005eb9
 8005de0:	08005eb9 	.word	0x08005eb9
 8005de4:	08005eb9 	.word	0x08005eb9
 8005de8:	08005eb9 	.word	0x08005eb9
 8005dec:	08005eb9 	.word	0x08005eb9
 8005df0:	08005eb9 	.word	0x08005eb9
 8005df4:	08005eb9 	.word	0x08005eb9
 8005df8:	08005e73 	.word	0x08005e73
 8005dfc:	08005eb9 	.word	0x08005eb9
 8005e00:	08005eb9 	.word	0x08005eb9
 8005e04:	08005eb9 	.word	0x08005eb9
 8005e08:	08005eb9 	.word	0x08005eb9
 8005e0c:	08005eb9 	.word	0x08005eb9
 8005e10:	08005eb9 	.word	0x08005eb9
 8005e14:	08005eb9 	.word	0x08005eb9
 8005e18:	08005eb9 	.word	0x08005eb9
 8005e1c:	08005eb9 	.word	0x08005eb9
 8005e20:	08005eb9 	.word	0x08005eb9
 8005e24:	08005eb9 	.word	0x08005eb9
 8005e28:	08005eb9 	.word	0x08005eb9
 8005e2c:	08005eb9 	.word	0x08005eb9
 8005e30:	08005eb9 	.word	0x08005eb9
 8005e34:	08005eb9 	.word	0x08005eb9
 8005e38:	08005eab 	.word	0x08005eab
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d037      	beq.n	8005eb0 <UART_SetConfig+0xc44>
 8005e40:	e03a      	b.n	8005eb8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e42:	f7fd fbb7 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005e46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e48:	e03c      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4a:	f7fd fbc9 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8005e4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e50:	e038      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fdac 	bl	80049b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e60:	e030      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e62:	f107 0318 	add.w	r3, r7, #24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fef8 	bl	8004c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e70:	e028      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e72:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <UART_SetConfig+0xc2c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <UART_SetConfig+0xc2c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	08db      	lsrs	r3, r3, #3
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	4a04      	ldr	r2, [pc, #16]	@ (8005e9c <UART_SetConfig+0xc30>)
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e90:	e018      	b.n	8005ec4 <UART_SetConfig+0xc58>
 8005e92:	bf00      	nop
 8005e94:	0800660c 	.word	0x0800660c
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	03d09000 	.word	0x03d09000
 8005ea0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005ea4:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <UART_SetConfig+0xccc>)
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	e00c      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eaa:	4b24      	ldr	r3, [pc, #144]	@ (8005f3c <UART_SetConfig+0xcd0>)
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eae:	e009      	b.n	8005ec4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb6:	e005      	b.n	8005ec4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ec2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d021      	beq.n	8005f0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <UART_SetConfig+0xcd4>)
 8005ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	441a      	add	r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d909      	bls.n	8005f08 <UART_SetConfig+0xc9c>
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005efa:	d205      	bcs.n	8005f08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	e002      	b.n	8005f0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2200      	movs	r2, #0
 8005f28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f2a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3748      	adds	r7, #72	@ 0x48
 8005f32:	46bd      	mov	sp, r7
 8005f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	003d0900 	.word	0x003d0900
 8005f40:	0800660c 	.word	0x0800660c

08005f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01a      	beq.n	800605a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006042:	d10a      	bne.n	800605a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b098      	sub	sp, #96	@ 0x60
 800608c:	af02      	add	r7, sp, #8
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006098:	f7fb f806 	bl	80010a8 <HAL_GetTick>
 800609c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d12f      	bne.n	800610c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f88e 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d022      	beq.n	800610c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060da:	653b      	str	r3, [r7, #80]	@ 0x50
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e063      	b.n	80061d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d149      	bne.n	80061ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006122:	2200      	movs	r2, #0
 8006124:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f857 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03c      	beq.n	80061ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	623b      	str	r3, [r7, #32]
   return(result);
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006152:	633b      	str	r3, [r7, #48]	@ 0x30
 8006154:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e6      	bne.n	8006134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	60fb      	str	r3, [r7, #12]
   return(result);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006186:	61fa      	str	r2, [r7, #28]
 8006188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	69b9      	ldr	r1, [r7, #24]
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	617b      	str	r3, [r7, #20]
   return(result);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e012      	b.n	80061d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3758      	adds	r7, #88	@ 0x58
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ec:	e04f      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f4:	d04b      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fa ff57 	bl	80010a8 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <UART_WaitOnFlagUntilTimeout+0x30>
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e04e      	b.n	80062ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d037      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b80      	cmp	r3, #128	@ 0x80
 8006222:	d034      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b40      	cmp	r3, #64	@ 0x40
 8006228:	d031      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b08      	cmp	r3, #8
 8006236:	d110      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2208      	movs	r2, #8
 800623e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f839 	bl	80062b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2208      	movs	r2, #8
 800624a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e029      	b.n	80062ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006268:	d111      	bne.n	800628e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f81f 	bl	80062b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e00f      	b.n	80062ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d0a0      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b095      	sub	sp, #84	@ 0x54
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062de:	643b      	str	r3, [r7, #64]	@ 0x40
 80062e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e6      	bne.n	80062c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	61fb      	str	r3, [r7, #28]
   return(result);
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <UART_EndRxTransfer+0xc8>)
 8006306:	4013      	ands	r3, r2
 8006308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800632a:	2b01      	cmp	r3, #1
 800632c:	d118      	bne.n	8006360 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	60bb      	str	r3, [r7, #8]
   return(result);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	647b      	str	r3, [r7, #68]	@ 0x44
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6979      	ldr	r1, [r7, #20]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	613b      	str	r3, [r7, #16]
   return(result);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006374:	bf00      	nop
 8006376:	3754      	adds	r7, #84	@ 0x54
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	effffffe 	.word	0xeffffffe

08006384 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_UARTEx_DisableFifoMode+0x16>
 8006396:	2302      	movs	r3, #2
 8006398:	e027      	b.n	80063ea <HAL_UARTEx_DisableFifoMode+0x66>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2224      	movs	r2, #36	@ 0x24
 80063a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800640a:	2302      	movs	r3, #2
 800640c:	e02d      	b.n	800646a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2224      	movs	r2, #36	@ 0x24
 800641a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f850 	bl	80064f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006486:	2302      	movs	r3, #2
 8006488:	e02d      	b.n	80064e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2224      	movs	r2, #36	@ 0x24
 8006496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f812 	bl	80064f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d108      	bne.n	8006512 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006510:	e031      	b.n	8006576 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006512:	2310      	movs	r3, #16
 8006514:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006516:	2310      	movs	r3, #16
 8006518:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	0e5b      	lsrs	r3, r3, #25
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	0f5b      	lsrs	r3, r3, #29
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	7b3a      	ldrb	r2, [r7, #12]
 800653e:	4911      	ldr	r1, [pc, #68]	@ (8006584 <UARTEx_SetNbDataToProcess+0x94>)
 8006540:	5c8a      	ldrb	r2, [r1, r2]
 8006542:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006546:	7b3a      	ldrb	r2, [r7, #12]
 8006548:	490f      	ldr	r1, [pc, #60]	@ (8006588 <UARTEx_SetNbDataToProcess+0x98>)
 800654a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800654c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	7b7a      	ldrb	r2, [r7, #13]
 800655c:	4909      	ldr	r1, [pc, #36]	@ (8006584 <UARTEx_SetNbDataToProcess+0x94>)
 800655e:	5c8a      	ldrb	r2, [r1, r2]
 8006560:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006564:	7b7a      	ldrb	r2, [r7, #13]
 8006566:	4908      	ldr	r1, [pc, #32]	@ (8006588 <UARTEx_SetNbDataToProcess+0x98>)
 8006568:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800656a:	fb93 f3f2 	sdiv	r3, r3, r2
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	08006624 	.word	0x08006624
 8006588:	0800662c 	.word	0x0800662c

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	@ (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	@ (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	@ (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	@ (80065e0 <__libc_init_array+0x44>)
 80065b0:	f000 f818 	bl	80065e4 <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	0800663c 	.word	0x0800663c
 80065d8:	0800663c 	.word	0x0800663c
 80065dc:	0800663c 	.word	0x0800663c
 80065e0:	08006640 	.word	0x08006640

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
