
as5600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bd4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001dac  08001dac  00002dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dbc  08001dbc  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001dbc  08001dbc  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001dbc  08001dbc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dbc  08001dbc  00002dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dc0  08001dc0  00002dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001dc4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001dd0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001dd0  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008adc  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197d  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0000d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000730  00000000  00000000  0000de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001aed  00000000  00000000  0000e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf2f  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e249a  00000000  00000000  0001bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002544  00000000  00000000  000fe44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00100990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001d94 	.word	0x08001d94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001d94 	.word	0x08001d94

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <MX_GPIO_Init+0x2c>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000222:	4a08      	ldr	r2, [pc, #32]	@ (8000244 <MX_GPIO_Init+0x2c>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <MX_GPIO_Init+0x2c>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <MX_I2C1_Init+0x74>)
 800024e:	4a1c      	ldr	r2, [pc, #112]	@ (80002c0 <MX_I2C1_Init+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000252:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000254:	4a1b      	ldr	r2, [pc, #108]	@ (80002c4 <MX_I2C1_Init+0x7c>)
 8000256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000258:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <MX_I2C1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025e:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000264:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800026a:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <MX_I2C1_Init+0x74>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <MX_I2C1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000282:	480e      	ldr	r0, [pc, #56]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000284:	f000 fc30 	bl	8000ae8 <HAL_I2C_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800028e:	f000 f8bf 	bl	8000410 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000292:	2100      	movs	r1, #0
 8000294:	4809      	ldr	r0, [pc, #36]	@ (80002bc <MX_I2C1_Init+0x74>)
 8000296:	f000 fcc2 	bl	8000c1e <HAL_I2CEx_ConfigAnalogFilter>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002a0:	f000 f8b6 	bl	8000410 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002a4:	2100      	movs	r1, #0
 80002a6:	4805      	ldr	r0, [pc, #20]	@ (80002bc <MX_I2C1_Init+0x74>)
 80002a8:	f000 fd04 	bl	8000cb4 <HAL_I2CEx_ConfigDigitalFilter>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f8ad 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000028 	.word	0x20000028
 80002c0:	40005400 	.word	0x40005400
 80002c4:	00503d58 	.word	0x00503d58

080002c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b09e      	sub	sp, #120	@ 0x78
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	2254      	movs	r2, #84	@ 0x54
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fd27 	bl	8001d3c <memset>
  if(i2cHandle->Instance==I2C1)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000370 <HAL_I2C_MspInit+0xa8>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d137      	bne.n	8000368 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002f8:	2340      	movs	r3, #64	@ 0x40
 80002fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4618      	mov	r0, r3
 8000306:	f001 facb 	bl	80018a0 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000310:	f000 f87e 	bl	8000410 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a16      	ldr	r2, [pc, #88]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000320:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA13     ------> I2C1_SCL
    PA14     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800032c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000330:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000332:	2312      	movs	r3, #18
 8000334:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800033e:	2304      	movs	r3, #4
 8000340:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034c:	f000 fa4a 	bl	80007e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 8000352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000354:	4a07      	ldr	r2, [pc, #28]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 8000356:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800035a:	6593      	str	r3, [r2, #88]	@ 0x58
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <HAL_I2C_MspInit+0xac>)
 800035e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000368:	bf00      	nop
 800036a:	3778      	adds	r7, #120	@ 0x78
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40005400 	.word	0x40005400
 8000374:	40021000 	.word	0x40021000

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f000 f8dd 	bl	800053a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f806 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f7ff ff48 	bl	8000218 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000388:	f7ff ff5e 	bl	8000248 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <main+0x14>

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	@ 0x50
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2238      	movs	r2, #56	@ 0x38
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fccc 	bl	8001d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003b6:	f000 fcc9 	bl	8000d4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c4:	2340      	movs	r3, #64	@ 0x40
 80003c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fd6f 	bl	8000eb4 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003dc:	f000 f818 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 f86d 	bl	80014d8 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000404:	f000 f804 	bl	8000410 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3750      	adds	r7, #80	@ 0x50
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <Error_Handler+0x8>

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <HAL_MspInit+0x44>)
 8000424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000426:	4a0e      	ldr	r2, [pc, #56]	@ (8000460 <HAL_MspInit+0x44>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6613      	str	r3, [r2, #96]	@ 0x60
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <HAL_MspInit+0x44>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <HAL_MspInit+0x44>)
 800043c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800043e:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <HAL_MspInit+0x44>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000444:	6593      	str	r3, [r2, #88]	@ 0x58
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <HAL_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000452:	f000 fd1f 	bl	8000e94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <NMI_Handler+0x4>

0800046c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f891 	bl	80005e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000516:	f001 fc19 	bl	8001d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff ff2d 	bl	8000378 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800052c:	08001dc4 	.word	0x08001dc4
  ldr r2, =_sbss
 8000530:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000534:	20000080 	.word	0x20000080

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>

0800053a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f91b 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054a:	200f      	movs	r0, #15
 800054c:	f000 f80e 	bl	800056c <HAL_InitTick>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	e001      	b.n	8000560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800055c:	f7ff ff5e 	bl	800041c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000560:	79fb      	ldrb	r3, [r7, #7]

}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000578:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <HAL_InitTick+0x68>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d022      	beq.n	80005c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <HAL_InitTick+0x6c>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <HAL_InitTick+0x68>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800058c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f918 	bl	80007ca <HAL_SYSTICK_Config>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10f      	bne.n	80005c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d809      	bhi.n	80005ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a6:	2200      	movs	r2, #0
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	f04f 30ff 	mov.w	r0, #4294967295
 80005ae:	f000 f8f2 	bl	8000796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <HAL_InitTick+0x70>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	e007      	b.n	80005ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e004      	b.n	80005ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e001      	b.n	80005ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <HAL_IncTick+0x1c>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <HAL_IncTick+0x20>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a03      	ldr	r2, [pc, #12]	@ (80005fc <HAL_IncTick+0x1c>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	2000007c 	.word	0x2000007c
 8000600:	20000008 	.word	0x20000008

08000604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b03      	ldr	r3, [pc, #12]	@ (8000618 <HAL_GetTick+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	@ (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	@ (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	@ 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	@ 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff ff8e 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff47 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff5e 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff90 	bl	80006d4 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5f 	bl	8000680 <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffb2 	bl	800073c <SysTick_Config>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80007f2:	e15a      	b.n	8000aaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	f000 814c 	beq.w	8000aa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	2b01      	cmp	r3, #1
 8000816:	d005      	beq.n	8000824 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000820:	2b02      	cmp	r3, #2
 8000822:	d130      	bne.n	8000886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2203      	movs	r2, #3
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800085a:	2201      	movs	r2, #1
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	f003 0201 	and.w	r2, r3, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 0303 	and.w	r3, r3, #3
 800088e:	2b03      	cmp	r3, #3
 8000890:	d017      	beq.n	80008c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d123      	bne.n	8000916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	6939      	ldr	r1, [r7, #16]
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0203 	and.w	r2, r3, #3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 80a6 	beq.w	8000aa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000958:	4b5b      	ldr	r3, [pc, #364]	@ (8000ac8 <HAL_GPIO_Init+0x2e4>)
 800095a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095c:	4a5a      	ldr	r2, [pc, #360]	@ (8000ac8 <HAL_GPIO_Init+0x2e4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6613      	str	r3, [r2, #96]	@ 0x60
 8000964:	4b58      	ldr	r3, [pc, #352]	@ (8000ac8 <HAL_GPIO_Init+0x2e4>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000970:	4a56      	ldr	r2, [pc, #344]	@ (8000acc <HAL_GPIO_Init+0x2e8>)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	3302      	adds	r3, #2
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	220f      	movs	r2, #15
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800099a:	d01f      	beq.n	80009dc <HAL_GPIO_Init+0x1f8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ad0 <HAL_GPIO_Init+0x2ec>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d019      	beq.n	80009d8 <HAL_GPIO_Init+0x1f4>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ad4 <HAL_GPIO_Init+0x2f0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d013      	beq.n	80009d4 <HAL_GPIO_Init+0x1f0>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a4a      	ldr	r2, [pc, #296]	@ (8000ad8 <HAL_GPIO_Init+0x2f4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d00d      	beq.n	80009d0 <HAL_GPIO_Init+0x1ec>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a49      	ldr	r2, [pc, #292]	@ (8000adc <HAL_GPIO_Init+0x2f8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d007      	beq.n	80009cc <HAL_GPIO_Init+0x1e8>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a48      	ldr	r2, [pc, #288]	@ (8000ae0 <HAL_GPIO_Init+0x2fc>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d101      	bne.n	80009c8 <HAL_GPIO_Init+0x1e4>
 80009c4:	2305      	movs	r3, #5
 80009c6:	e00a      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009c8:	2306      	movs	r3, #6
 80009ca:	e008      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009cc:	2304      	movs	r3, #4
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009d0:	2303      	movs	r3, #3
 80009d2:	e004      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009d4:	2302      	movs	r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <HAL_GPIO_Init+0x1fa>
 80009dc:	2300      	movs	r3, #0
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	f002 0203 	and.w	r2, r2, #3
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009ee:	4937      	ldr	r1, [pc, #220]	@ (8000acc <HAL_GPIO_Init+0x2e8>)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009fc:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a20:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ae4 <HAL_GPIO_Init+0x300>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f47f ae9d 	bne.w	80007f4 <HAL_GPIO_Init+0x10>
  }
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	48000800 	.word	0x48000800
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	48001000 	.word	0x48001000
 8000ae0:	48001400 	.word	0x48001400
 8000ae4:	40010400 	.word	0x40010400

08000ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e08d      	b.n	8000c16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d106      	bne.n	8000b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fbda 	bl	80002c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2224      	movs	r2, #36	@ 0x24
 8000b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0201 	bic.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d107      	bne.n	8000b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	e006      	b.n	8000b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d108      	bne.n	8000b8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	e007      	b.n	8000b9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69d9      	ldr	r1, [r3, #28]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a1a      	ldr	r2, [r3, #32]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0201 	orr.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2220      	movs	r2, #32
 8000c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d138      	bne.n	8000ca6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e032      	b.n	8000ca8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2224      	movs	r2, #36	@ 0x24
 8000c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0201 	bic.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000c70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 0201 	orr.w	r2, r2, #1
 8000c90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2220      	movs	r2, #32
 8000c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ca6:	2302      	movs	r3, #2
  }
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d139      	bne.n	8000d3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e033      	b.n	8000d40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2224      	movs	r2, #36	@ 0x24
 8000ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0201 	orr.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d3e:	2302      	movs	r3, #2
  }
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d141      	bne.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d66:	d131      	bne.n	8000dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d68:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6e:	4a46      	ldr	r2, [pc, #280]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	4b43      	ldr	r3, [pc, #268]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d80:	4a41      	ldr	r2, [pc, #260]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d88:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2232      	movs	r2, #50	@ 0x32
 8000d8e:	fb02 f303 	mul.w	r3, r2, r3
 8000d92:	4a3f      	ldr	r2, [pc, #252]	@ (8000e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9e:	e002      	b.n	8000da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da6:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000db2:	d102      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f2      	bne.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dba:	4b33      	ldr	r3, [pc, #204]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dc6:	d158      	bne.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e057      	b.n	8000e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ddc:	e04d      	b.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000de4:	d141      	bne.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000df2:	d131      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfa:	4a23      	ldr	r2, [pc, #140]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2232      	movs	r2, #50	@ 0x32
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	0c9b      	lsrs	r3, r3, #18
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2a:	e002      	b.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3e:	d102      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f2      	bne.n	8000e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e52:	d112      	bne.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e011      	b.n	8000e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e68:	e007      	b.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40007000 	.word	0x40007000
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	431bde83 	.word	0x431bde83

08000e94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea2:	6093      	str	r3, [r2, #8]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e2fe      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d075      	beq.n	8000fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed2:	4b97      	ldr	r3, [pc, #604]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000edc:	4b94      	ldr	r3, [pc, #592]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b0c      	cmp	r3, #12
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x3e>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d002      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x44>
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d10b      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d05b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x108>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d157      	bne.n	8000fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e2d9      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d106      	bne.n	8000f28 <HAL_RCC_OscConfig+0x74>
 8000f1a:	4b85      	ldr	r3, [pc, #532]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a84      	ldr	r2, [pc, #528]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x98>
 8000f32:	4b7f      	ldr	r3, [pc, #508]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7e      	ldr	r2, [pc, #504]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7b      	ldr	r2, [pc, #492]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	4b78      	ldr	r3, [pc, #480]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a77      	ldr	r2, [pc, #476]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b75      	ldr	r3, [pc, #468]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a74      	ldr	r2, [pc, #464]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fb4a 	bl	8000604 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fb46 	bl	8000604 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	@ 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e29e      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f86:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xc0>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb36 	bl	8000604 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fb32 	bl	8000604 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	@ 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e28a      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fae:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0xe8>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d075      	beq.n	80010b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fca:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd4:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b0c      	cmp	r3, #12
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x136>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d002      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x13c>
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d11f      	bne.n	8001030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x154>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e25d      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	4946      	ldr	r1, [pc, #280]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800101c:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <HAL_RCC_OscConfig+0x280>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff faa3 	bl	800056c <HAL_InitTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d043      	beq.n	80010b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e249      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b3d      	ldr	r3, [pc, #244]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a3c      	ldr	r2, [pc, #240]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fade 	bl	8000604 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fada 	bl	8000604 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e232      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800105e:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	061b      	lsls	r3, r3, #24
 8001078:	492d      	ldr	r1, [pc, #180]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e01a      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2a      	ldr	r2, [pc, #168]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff faba 	bl	8000604 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fab6 	bl	8000604 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e20e      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1e0>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d041      	beq.n	8001146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d0:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff fa93 	bl	8000604 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fa8f 	bl	8000604 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1e7      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0ef      	beq.n	80010e2 <HAL_RCC_OscConfig+0x22e>
 8001102:	e020      	b.n	8001146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001114:	f7ff fa76 	bl	8000604 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111a:	e00d      	b.n	8001138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fa72 	bl	8000604 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d906      	bls.n	8001138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1ca      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001138:	4b8c      	ldr	r3, [pc, #560]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ea      	bne.n	800111c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80a6 	beq.w	80012a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001158:	4b84      	ldr	r3, [pc, #528]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_OscConfig+0x2b4>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x2b6>
 8001168:	2300      	movs	r3, #0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b7f      	ldr	r3, [pc, #508]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a7e      	ldr	r2, [pc, #504]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b7c      	ldr	r3, [pc, #496]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800118a:	4b79      	ldr	r3, [pc, #484]	@ (8001370 <HAL_RCC_OscConfig+0x4bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001196:	4b76      	ldr	r3, [pc, #472]	@ (8001370 <HAL_RCC_OscConfig+0x4bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a75      	ldr	r2, [pc, #468]	@ (8001370 <HAL_RCC_OscConfig+0x4bc>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fa2f 	bl	8000604 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fa2b 	bl	8000604 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e183      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001370 <HAL_RCC_OscConfig+0x4bc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_RCC_OscConfig+0x32e>
 80011d0:	4b66      	ldr	r3, [pc, #408]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d6:	4a65      	ldr	r2, [pc, #404]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011e0:	e024      	b.n	800122c <HAL_RCC_OscConfig+0x378>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d110      	bne.n	800120c <HAL_RCC_OscConfig+0x358>
 80011ea:	4b60      	ldr	r3, [pc, #384]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f0:	4a5e      	ldr	r2, [pc, #376]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011fa:	4b5c      	ldr	r3, [pc, #368]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001200:	4a5a      	ldr	r2, [pc, #360]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800120a:	e00f      	b.n	800122c <HAL_RCC_OscConfig+0x378>
 800120c:	4b57      	ldr	r3, [pc, #348]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800120e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001212:	4a56      	ldr	r2, [pc, #344]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800121c:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001222:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d016      	beq.n	8001262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff f9e6 	bl	8000604 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff f9e2 	bl	8000604 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e138      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	4b46      	ldr	r3, [pc, #280]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ed      	beq.n	800123c <HAL_RCC_OscConfig+0x388>
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff f9cf 	bl	8000604 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff f9cb 	bl	8000604 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e121      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ed      	bne.n	800126a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	4a34      	ldr	r2, [pc, #208]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d03c      	beq.n	8001326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01c      	beq.n	80012ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012ba:	4a2c      	ldr	r2, [pc, #176]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff f99e 	bl	8000604 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012cc:	f7ff f99a 	bl	8000604 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0f2      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ef      	beq.n	80012cc <HAL_RCC_OscConfig+0x418>
 80012ec:	e01b      	b.n	8001326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012f4:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff f981 	bl	8000604 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001306:	f7ff f97d 	bl	8000604 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0d5      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ef      	bne.n	8001306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80c9 	beq.w	80014c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b0c      	cmp	r3, #12
 800133a:	f000 8083 	beq.w	8001444 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d15e      	bne.n	8001404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_RCC_OscConfig+0x4b8>)
 800134c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff f957 	bl	8000604 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001358:	e00c      	b.n	8001374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff f953 	bl	8000604 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d905      	bls.n	8001374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0ab      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001374:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ec      	bne.n	800135a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001380:	4b52      	ldr	r3, [pc, #328]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	4b52      	ldr	r3, [pc, #328]	@ (80014d0 <HAL_RCC_OscConfig+0x61c>)
 8001386:	4013      	ands	r3, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6a11      	ldr	r1, [r2, #32]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001390:	3a01      	subs	r2, #1
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	4311      	orrs	r1, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800139a:	0212      	lsls	r2, r2, #8
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013a2:	0852      	lsrs	r2, r2, #1
 80013a4:	3a01      	subs	r2, #1
 80013a6:	0552      	lsls	r2, r2, #21
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013ae:	0852      	lsrs	r2, r2, #1
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0652      	lsls	r2, r2, #25
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013ba:	06d2      	lsls	r2, r2, #27
 80013bc:	430a      	orrs	r2, r1
 80013be:	4943      	ldr	r1, [pc, #268]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c4:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a40      	ldr	r2, [pc, #256]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff f912 	bl	8000604 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff f90e 	bl	8000604 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e066      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x530>
 8001402:	e05e      	b.n	80014c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a30      	ldr	r2, [pc, #192]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 800140a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff f8f8 	bl	8000604 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f8f4 	bl	8000604 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e04c      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4924      	ldr	r1, [pc, #144]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <HAL_RCC_OscConfig+0x620>)
 800143e:	4013      	ands	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
 8001442:	e03e      	b.n	80014c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e039      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_RCC_OscConfig+0x618>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	429a      	cmp	r2, r3
 8001462:	d12c      	bne.n	80014be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	3b01      	subs	r3, #1
 8001470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d123      	bne.n	80014be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d11b      	bne.n	80014be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001490:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d113      	bne.n	80014be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d109      	bne.n	80014be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	019f800c 	.word	0x019f800c
 80014d4:	feeefffc 	.word	0xfeeefffc

080014d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e11e      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b91      	ldr	r3, [pc, #580]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d910      	bls.n	8001520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 020f 	bic.w	r2, r3, #15
 8001506:	498c      	ldr	r1, [pc, #560]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b8a      	ldr	r3, [pc, #552]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e106      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d073      	beq.n	8001614 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d129      	bne.n	8001588 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001534:	4b81      	ldr	r3, [pc, #516]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0f4      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001544:	f000 f966 	bl	8001814 <RCC_GetSysClockFreqFromPLLSource>
 8001548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4a7c      	ldr	r2, [pc, #496]	@ (8001740 <HAL_RCC_ClockConfig+0x268>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d93f      	bls.n	80015d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001552:	4b7a      	ldr	r3, [pc, #488]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001566:	2b00      	cmp	r3, #0
 8001568:	d033      	beq.n	80015d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d12f      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001572:	4b72      	ldr	r3, [pc, #456]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800157a:	4a70      	ldr	r2, [pc, #448]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e024      	b.n	80015d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001590:	4b6a      	ldr	r3, [pc, #424]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0c6      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	4b66      	ldr	r3, [pc, #408]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0be      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015b0:	f000 f8ce 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_RCC_ClockConfig+0x268>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d909      	bls.n	80015d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015be:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015c6:	4a5d      	ldr	r2, [pc, #372]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b5a      	ldr	r3, [pc, #360]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4957      	ldr	r1, [pc, #348]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e4:	f7ff f80e 	bl	8000604 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff f80a 	bl	8000604 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e095      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b4e      	ldr	r3, [pc, #312]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b43      	ldr	r3, [pc, #268]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a42      	ldr	r2, [pc, #264]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001636:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001644:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800164c:	4a3b      	ldr	r2, [pc, #236]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 800164e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4936      	ldr	r1, [pc, #216]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
 8001666:	e008      	b.n	800167a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b80      	cmp	r3, #128	@ 0x80
 800166c:	d105      	bne.n	800167a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800166e:	4b33      	ldr	r3, [pc, #204]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a32      	ldr	r2, [pc, #200]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 8001674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001678:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d21d      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001688:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 020f 	bic.w	r2, r3, #15
 8001690:	4929      	ldr	r1, [pc, #164]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001698:	f7fe ffb4 	bl	8000604 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7fe ffb0 	bl	8000604 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e03b      	b.n	800172e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_RCC_ClockConfig+0x260>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1ed      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4917      	ldr	r1, [pc, #92]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	490f      	ldr	r1, [pc, #60]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001702:	f000 f825 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 8001706:	4602      	mov	r2, r0
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <HAL_RCC_ClockConfig+0x264>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	490c      	ldr	r1, [pc, #48]	@ (8001744 <HAL_RCC_ClockConfig+0x26c>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x270>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff20 	bl	800056c <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	04c4b400 	.word	0x04c4b400
 8001744:	08001dac 	.word	0x08001dac
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001756:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b04      	cmp	r3, #4
 8001760:	d102      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	e047      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d102      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001774:	4b26      	ldr	r3, [pc, #152]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e03e      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d136      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3301      	adds	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ae:	68d2      	ldr	r2, [r2, #12]
 80017b0:	0a12      	lsrs	r2, r2, #8
 80017b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
      break;
 80017bc:	e00c      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017be:	4a13      	ldr	r2, [pc, #76]	@ (800180c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4a10      	ldr	r2, [pc, #64]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	0a12      	lsrs	r2, r2, #8
 80017cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
      break;
 80017d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0e5b      	lsrs	r3, r3, #25
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	e001      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017f8:	693b      	ldr	r3, [r7, #16]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d10c      	bne.n	8001852 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001838:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001842:	68d2      	ldr	r2, [r2, #12]
 8001844:	0a12      	lsrs	r2, r2, #8
 8001846:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
    break;
 8001850:	e00c      	b.n	800186c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800185c:	68d2      	ldr	r2, [r2, #12]
 800185e:	0a12      	lsrs	r2, r2, #8
 8001860:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    break;
 800186a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0e5b      	lsrs	r3, r3, #25
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	00f42400 	.word	0x00f42400

080018a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018a8:	2300      	movs	r3, #0
 80018aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018ac:	2300      	movs	r3, #0
 80018ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8098 	beq.w	80019ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	4a3f      	ldr	r2, [pc, #252]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018da:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ea:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a39      	ldr	r2, [pc, #228]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018f6:	f7fe fe85 	bl	8000604 <HAL_GetTick>
 80018fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018fc:	e009      	b.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7fe fe81 	bl	8000604 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d902      	bls.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	74fb      	strb	r3, [r7, #19]
        break;
 8001910:	e005      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001912:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0ef      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800191e:	7cfb      	ldrb	r3, [r7, #19]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d159      	bne.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800192e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01e      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	d019      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800194a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800194c:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800194e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001952:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800195c:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800196c:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7fe fe41 	bl	8000604 <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	e00b      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7fe fe3d 	bl	8000604 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d902      	bls.n	800199e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	74fb      	strb	r3, [r7, #19]
            break;
 800199c:	e006      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ec      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80019c8:	e008      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019ca:	7cfb      	ldrb	r3, [r7, #19]
 80019cc:	74bb      	strb	r3, [r7, #18]
 80019ce:	e005      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019dc:	7c7b      	ldrb	r3, [r7, #17]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	4aa6      	ldr	r2, [pc, #664]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80019fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a00:	f023 0203 	bic.w	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	499d      	ldr	r1, [pc, #628]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a1c:	4b98      	ldr	r3, [pc, #608]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	f023 020c 	bic.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4995      	ldr	r1, [pc, #596]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a3e:	4b90      	ldr	r3, [pc, #576]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	498c      	ldr	r1, [pc, #560]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a60:	4b87      	ldr	r3, [pc, #540]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	4984      	ldr	r1, [pc, #528]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a82:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	497b      	ldr	r1, [pc, #492]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00a      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001aa4:	4b76      	ldr	r3, [pc, #472]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4973      	ldr	r1, [pc, #460]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001acc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	496a      	ldr	r1, [pc, #424]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00a      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4962      	ldr	r1, [pc, #392]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	4959      	ldr	r1, [pc, #356]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00a      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001b2c:	4b54      	ldr	r3, [pc, #336]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	4951      	ldr	r1, [pc, #324]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	4948      	ldr	r1, [pc, #288]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4940      	ldr	r1, [pc, #256]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a3a      	ldr	r2, [pc, #232]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ba8:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb6:	4932      	ldr	r1, [pc, #200]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bee:	4924      	ldr	r1, [pc, #144]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d015      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c26:	4916      	ldr	r1, [pc, #88]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c36:	d105      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a10      	ldr	r2, [pc, #64]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d019      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c6e:	d109      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a02      	ldr	r2, [pc, #8]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	60d3      	str	r3, [r2, #12]
 8001c7c:	e002      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c90:	4b29      	ldr	r3, [pc, #164]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4926      	ldr	r1, [pc, #152]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cae:	d105      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd6:	4918      	ldr	r1, [pc, #96]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	490a      	ldr	r1, [pc, #40]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <memset>:
 8001d3c:	4402      	add	r2, r0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d100      	bne.n	8001d46 <memset+0xa>
 8001d44:	4770      	bx	lr
 8001d46:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4a:	e7f9      	b.n	8001d40 <memset+0x4>

08001d4c <__libc_init_array>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8001d84 <__libc_init_array+0x38>)
 8001d50:	4c0d      	ldr	r4, [pc, #52]	@ (8001d88 <__libc_init_array+0x3c>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	2600      	movs	r6, #0
 8001d58:	42a6      	cmp	r6, r4
 8001d5a:	d109      	bne.n	8001d70 <__libc_init_array+0x24>
 8001d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8001d8c <__libc_init_array+0x40>)
 8001d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8001d90 <__libc_init_array+0x44>)
 8001d60:	f000 f818 	bl	8001d94 <_init>
 8001d64:	1b64      	subs	r4, r4, r5
 8001d66:	10a4      	asrs	r4, r4, #2
 8001d68:	2600      	movs	r6, #0
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d105      	bne.n	8001d7a <__libc_init_array+0x2e>
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d74:	4798      	blx	r3
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7ee      	b.n	8001d58 <__libc_init_array+0xc>
 8001d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7e:	4798      	blx	r3
 8001d80:	3601      	adds	r6, #1
 8001d82:	e7f2      	b.n	8001d6a <__libc_init_array+0x1e>
 8001d84:	08001dbc 	.word	0x08001dbc
 8001d88:	08001dbc 	.word	0x08001dbc
 8001d8c:	08001dbc 	.word	0x08001dbc
 8001d90:	08001dc0 	.word	0x08001dc0

08001d94 <_init>:
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	bf00      	nop
 8001d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9a:	bc08      	pop	{r3}
 8001d9c:	469e      	mov	lr, r3
 8001d9e:	4770      	bx	lr

08001da0 <_fini>:
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	bf00      	nop
 8001da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001da6:	bc08      	pop	{r3}
 8001da8:	469e      	mov	lr, r3
 8001daa:	4770      	bx	lr
